<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通过原始存储配置文件恢复数据库（简单粗暴）</title>
      <link href="/posts/add5de83/"/>
      <url>/posts/add5de83/</url>
      
        <content type="html"><![CDATA[<div class="tip warning faa-horizontal animated"><p>本文方法为作者自己尝试得出，不一定有效，若失败，还请参考正规的解决方案</p></div><div class="tip "><p>本文的三种数据库恢复都以Docker来进行恢复，即本文会用Docker创建相应的数据库容器来对需要恢复的数据库进行恢复，在删除配置文件时，需要查看一些配置文件内容是否与需要恢复的数据库相同，如K8S集群中创建的数据库与Docker中创建的pg数据库就不同，<code>postmaster.pid</code>等文件内容</p></div><h2 id="1-mongodb"><a class="markdownIt-Anchor" href="#1-mongodb"></a> 1 MongoDB</h2><ul><li>找到需要恢复的数据库的存储配置文件，如下图所示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231012214612701.png" alt="image-20231012214612701" /></p><ul><li>拉取MongoDB镜像，版本最好要对应，这里就以安装最新版本为例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><ul><li>生成容器<ul><li><code>-d</code>：后台启动模式，不会占用终端</li><li><code>-p</code>：主机端口:容器内端口</li><li><code>--name</code>：容器名称</li><li><code>-v</code>：指定了主机文件系统路径 <code>/mnt/storage/wbw-mongo/data</code> 和容器内部路径 <code>/data/db</code> 之间的卷映射。这个映射用于将 MongoDB 数据库数据存储在主机上，以便数据持久性。容器内的数据将被存储在主机的 <code>/mnt/storage/wbw-mongo/data</code> 目录中</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 31074:27017 --name wbw-mongo -v /mnt/storage/wbw-mongo/data:/data/db  mongo:latest</span><br></pre></td></tr></table></figure><ul><li>删除刚刚生成的存储配置文件</li></ul><div class="tip warning faa-horizontal animated"><p>注意，不要直接删除data文件夹，而是将data内的文件全部删除</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /mnt/storage/wbw-mongo/data/*</span><br></pre></td></tr></table></figure><ul><li>将需要恢复的数据库的存储配置文件复制到<code>/mnt/storage/wbw-mongo/data/</code>下，假设需要恢复的数据库的存储配置文件位置为<code>/mnt/storage/bak-mongo/data/</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /mnt/storage/bak-mongo/data/* /mnt/storage/wbw-mongo/data/</span><br></pre></td></tr></table></figure><ul><li>重启容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart wbw-mongo</span><br></pre></td></tr></table></figure><ul><li>恢复结束</li></ul><hr /><h2 id="2-mysql"><a class="markdownIt-Anchor" href="#2-mysql"></a> 2 MySQL</h2><ul><li>找到需要恢复的数据库的存储配置文件，如下图所示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231012221503300.png" alt="image-20231012221503300" /></p><ul><li>拉取MySQL镜像，版本最好要对应，这里就以安装最新版本为例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><ul><li>生成容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 30491:3306 --name wbw-mysql -e MYSQL_ROOT_PASSWORD=123456 -v /mnt/storage/wbw-mysql/data:/var/lib/mysql mysql:latest</span><br></pre></td></tr></table></figure><ul><li>删除刚刚生成的存储配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /mnt/storage/wbw-mysql/data/*</span><br></pre></td></tr></table></figure><ul><li>将需要恢复的数据库的存储配置文件复制到<code>/mnt/storage/wbw-mysql/data/</code>下，假设需要恢复的数据库的存储配置文件位置为<code>/mnt/storage/bak-mysql/data/</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /mnt/storage/bak-mysql/data/* /mnt/storage/wbw-mysql/data/</span><br></pre></td></tr></table></figure><ul><li>重启容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart wbw-mysql</span><br></pre></td></tr></table></figure><ul><li>恢复结束</li></ul><hr /><h2 id="3-postgresql"><a class="markdownIt-Anchor" href="#3-postgresql"></a> 3 PostgreSQL</h2><ul><li>找到需要恢复的数据库的存储配置文件，如下图所示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231012225210135.png" alt="image-20231012225210135" /></p><ul><li>拉取PostgreSQL镜像，版本最好要对应，这里就以安装14为例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:14</span><br></pre></td></tr></table></figure><ul><li>生成容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name wbw-postgres -v /mnt/storage/wbw-postgres/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 postgres:14</span><br></pre></td></tr></table></figure><ul><li>删除刚刚生成的存储配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /mnt/storage/wbw-postgres/data/*</span><br></pre></td></tr></table></figure><ul><li>将需要恢复的数据库的存储配置文件复制到<code>/mnt/storage/postgresql/data/</code>下，假设需要恢复的数据库的存储配置文件位置为<code>/mnt/storage/bak-postgresql/data/</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /mnt/storage/bak-postgres/data/* /mnt/storage/wbw-postgres/data/</span><br></pre></td></tr></table></figure><ul><li>重启容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart wbw-postgres</span><br></pre></td></tr></table></figure><ul><li>恢复结束</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Docker </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Office下载及激活教程</title>
      <link href="/posts/499a3852/"/>
      <url>/posts/499a3852/</url>
      
        <content type="html"><![CDATA[<h2 id="1-office-tool-plus下载"><a class="markdownIt-Anchor" href="#1-office-tool-plus下载"></a> 1 Office Tool Plus下载</h2><ul><li>下载链接</li></ul><div class="tag link"><a class="link-card" title="Office Tool Plus" href="https://otp.landian.vip/zh-cn/download.html"><div class="left"><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/20231011211410.png"/></div><div class="right"><p class="text">Office Tool Plus</p><p class="url">https://otp.landian.vip/zh-cn/download.html</p></div></a></div><ul><li>下载包含框架版本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011201941876-7026790.png" alt="image-20231011201941876" /></p><ul><li>解压后双击运行Office Tool Plus.exe</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011202115985.png" alt="image-20231011202115985" /></p><h2 id="2-安装office"><a class="markdownIt-Anchor" href="#2-安装office"></a> 2 安装Office</h2><ul><li>若曾经安装过Office，则需要完全卸载，若卸载遇到问题，可以使用Office Tool Plus工具箱中的卸载工具进行卸载</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011202421324.png" alt="image-20231011202421324" /></p><ul><li>点击左侧部署，根据自己的需求进行设置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011202700548.png" alt="image-20231011202700548" /></p><ul><li>在下面的产品对话框点击添加产品，选择Microsoft 365 企业应用版</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011202856817.png" alt="image-20231011202856817" /></p><ul><li>然后勾选自己想要安装的产品</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011202942134.png" alt="image-20231011202942134" /></p><ul><li>点击开始部署即可开始安装</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011203205961.png" alt="image-20231011203205961" /></p><h2 id="3-激活office"><a class="markdownIt-Anchor" href="#3-激活office"></a> 3 激活Office</h2><ul><li>点击左侧激活选项，在许可证管理选项卡点击安装许可证，选择带有批量许可证的选项，然后点击确定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011203610772.png" alt="image-20231011203610772" /></p><ul><li>许可证安装完成，点击KMS管理，保存设置，若该KMS主机报错，可以在以下链接找合适的：<a href="https://www.coolhub.top/tech-articles/kms_list.html">KMS 列表</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011204022077.png" alt="image-20231011204022077" /></p><ul><li>点击激活即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231011204111959.png" alt="image-20231011204111959" /></p>]]></content>
      
      
      <categories>
          
          <category> 日常办公 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
            <tag> Office </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装PostgreSQL并添加PostGIS拓展</title>
      <link href="/posts/e232bc22/"/>
      <url>/posts/e232bc22/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载镜像"><a class="markdownIt-Anchor" href="#1-下载镜像"></a> 1 下载镜像</h3><ul><li>访问dockerhub官网：<a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a> 地址，下载指定版本的PostgreSQL数据库。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231009173917562.png" alt="image-20231009173917562" /></p><ul><li>下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:14</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231009200905029.png" alt="image-20231009200905029" /></p><h3 id="2-镜像转为容器"><a class="markdownIt-Anchor" href="#2-镜像转为容器"></a> 2 镜像转为容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name postgres -v /mnt/storage/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 postgres:14</span><br></pre></td></tr></table></figure><ul><li><code>docker run</code>: 这是Docker命令的开头，用于运行一个容器。</li><li><code>-d</code>: 这是一个标志，表示容器应以后台模式运行（detached mode），这意味着容器将在后台运行，不会占用终端。</li><li><code>--restart=always</code>: 这是一个标志，指定容器在退出时应该始终自动重新启动。如果容器不期望停止运行，这可以确保容器总是在它退出时重新启动。</li><li><code>--name postgres</code>: 这是一个标志，为容器指定了一个名称，即&quot;postgres&quot;。这使得容器可以通过这个名称来引用，而不必使用容器ID。</li><li><code>-v /mnt/storage/postgresql/data:/var/lib/postgresql/data</code>: 这是一个标志，指定了主机文件系统路径<code>/mnt/storage/postgresql/data</code>和容器内部路径<code>/var/lib/postgresql/data</code>之间的卷映射。这个映射用于将PostgreSQL数据库数据存储在主机上，以便数据持久性。容器内的数据将被存储在主机的<code>/mnt/storage/postgresql/data</code>目录中。</li><li><code>-e POSTGRES_PASSWORD=123456</code>: 这是一个标志，用于设置PostgreSQL数据库的密码。在这个例子中，密码被设置为&quot;123456&quot;，这是一个示例密码。你可以根据需要更改它。</li><li><code>-p 5432:5432</code>: 这是一个标志，用于将主机端口5432映射到容器内的端口5432。这是PostgreSQL数据库默认监听的端口。通过这个映射，你可以在主机上通过5432端口访问容器内运行的PostgreSQL数据库。</li><li><code>postgres:14</code>: 这是要运行的Docker镜像的名称和标签。在这里，使用的是PostgreSQL 14版本的官方Docker镜像。Docker将下载并运行此镜像以创建容器。</li></ul><div class="tip warning faa-horizontal animated"><p>一旦运行此命令，Docker将创建一个PostgreSQL容器，该容器以后台模式运行，具有指定的名称<code>postgres</code>，将数据存储在主机上的<code>/mnt/storage/postgresql/data</code>目录中，使用指定的密码，同时将主机端口5432映射到容器内的5432端口上。容器将在退出时自动重新启动，以确保持续可用性。</p></div><h3 id="3-添加postgis拓展"><a class="markdownIt-Anchor" href="#3-添加postgis拓展"></a> 3 添加PostGIS拓展</h3><ul><li>进入容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ca24dbe6f3d7 bash</span><br></pre></td></tr></table></figure><ul><li>更新软件包列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><ul><li>使用apt在线安装PostGIS（注意版本要和PostgreSQL兼容）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install postgresql-14-postgis-3 postgresql-14-postgis-3-dbgsym postgresql-14-postgis-3-scripts</span><br></pre></td></tr></table></figure><ul><li>使用Navicat等客户端软件连接到PostgreSQL，并新建查询，输入以下SQL语句，点击执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgis;</span><br><span class="line"><span class="keyword">SELECT</span> postgis_full_version();</span><br></pre></td></tr></table></figure><ul><li>出现类似如下查询结果即为成功</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POSTGIS=&quot;3.4.0 0874ea3&quot; [EXTENSION] PGSQL=&quot;140&quot; GEOS=&quot;3.11.1-CAPI-1.17.1&quot; PROJ=&quot;9.1.1 NETWORK_ENABLED=OFF URL_ENDPOINT=https://cdn.proj.org USER_WRITABLE_DIRECTORY=/var/lib/postgresql/.local/share/proj DATABASE_PATH=/usr/share/proj/proj.db&quot; LIBXML=&quot;2.9.14&quot; LIBJSON=&quot;0.16&quot; LIBPROTOBUF=&quot;1.4.1&quot; WAGYU=&quot;0.5.0 (Internal)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Docker </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> PostGIS </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像打包迁移</title>
      <link href="/posts/620cff7f/"/>
      <url>/posts/620cff7f/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>要将 Docker 镜像从一台服务器传输到另一台服务器，您可以使用以下步骤：</p></div><h3 id="1-导出-docker-镜像"><a class="markdownIt-Anchor" href="#1-导出-docker-镜像"></a> <strong>1 导出 Docker 镜像</strong>：</h3><ul><li>首先，在源服务器上导出您要传输的 Docker 镜像。使用以下命令将镜像导出为一个文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o image.tar image_name:tag</span><br></pre></td></tr></table></figure><ul><li>其中 <code>image_name:tag</code> 是您要导出的 Docker 镜像的名称和标签。此命令将创建一个名为 <code>image.tar</code> 的镜像文件。</li></ul><h3 id="2-传输-docker-镜像文件"><a class="markdownIt-Anchor" href="#2-传输-docker-镜像文件"></a> <strong>2 传输 Docker 镜像文件</strong></h3><ul><li>将导出的 Docker 镜像文件 <code>image.tar</code> 从源服务器传输到目标服务器。您可以使用各种方法，如SCP、SFTP、rsync 或者将文件上传到云存储服务（如Amazon S3、Google Cloud Storage）等方式来传输文件。</li></ul><h3 id="3-导入-docker-镜像"><a class="markdownIt-Anchor" href="#3-导入-docker-镜像"></a> <strong>3 导入 Docker 镜像</strong></h3><ul><li>在目标服务器上导入传输过来的 Docker 镜像文件。使用以下命令来导入镜像：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i image.tar</span><br></pre></td></tr></table></figure><ul><li>这将从 <code>image.tar</code> 文件中加载镜像到目标服务器的 Docker 环境中。</li></ul><h3 id="4-验证导入的-docker-镜像"><a class="markdownIt-Anchor" href="#4-验证导入的-docker-镜像"></a> <strong>4 验证导入的 Docker 镜像</strong></h3><ul><li>您可以使用以下命令来验证在目标服务器上成功导入了镜像：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li><p>这将列出在目标服务器上可用的 Docker 镜像，确保您的镜像已成功导入。</p></li><li><p>现在，您已经成功将 Docker 镜像从一台服务器传输到另一台服务器。请注意，在进行这些操作时，确保您有足够的权限来执行 Docker 命令和文件传输操作，并且在网络连接方面没有限制。另外，确保目标服务器上的 Docker 环境与源服务器兼容，以便正常运行您的镜像。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>武汉大学微软社招新2023笔试题</title>
      <link href="/posts/33834cc9/"/>
      <url>/posts/33834cc9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目"><a class="markdownIt-Anchor" href="#1-题目"></a> 1 题目</h2><div class="note simple"><p><a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/Files.zip">点此下载 Files</a>，并解压缩。Files 包含了 100 个具有随机名称的 .txt 文件，其中有且只有唯一一个 .txt 文件的内容是“MSC2023”，请尝试将其找出，得到文件名称。</p></div><div class="tag link"><a class="link-card" title="Github源码" href="https://github.com/binwenwu/Find-File"><div class="left"><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/u%3D1662322932%2C969135674%26fm%3D253%26fmt%3Dauto%26app%3D120%26f%3DJPEG"/></div><div class="right"><p class="text">Github源码</p><p class="url">https://github.com/binwenwu/Find-File</p></div></a></div><h2 id="2-java-版本"><a class="markdownIt-Anchor" href="#2-java-版本"></a> 2 Java 版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wbw</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FindNameJava</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 压缩文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">zipFilePath</span> <span class="operator">=</span> <span class="string">&quot;src/main/demo/Files.zip&quot;</span>;</span><br><span class="line">        <span class="comment">// 解压缩目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">unzipFolderPath</span> <span class="operator">=</span> <span class="string">&quot;src/main/demo/&quot;</span>;</span><br><span class="line">        <span class="comment">// 目标文件内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">targetContent</span> <span class="operator">=</span> <span class="string">&quot;MSC2023&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 解压文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unzip(zipFilePath, unzipFolderPath);</span><br><span class="line">            System.out.println(<span class="string">&quot;Unzip operation successful.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 开始遍历寻找</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">targetFileName</span> <span class="operator">=</span> findTargetFileName(<span class="string">&quot;src/main/demo/Files&quot;</span>, targetContent);</span><br><span class="line">        <span class="keyword">if</span> (targetFileName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">outputFileName</span> <span class="operator">=</span> <span class="string">&quot;src/main/demo/target.txt&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputFileName)) &#123;</span><br><span class="line">                writer.println(targetFileName);</span><br><span class="line">                System.out.println(<span class="string">&quot;Target file name written to &quot;</span> + outputFileName + <span class="string">&quot;: &quot;</span> + targetFileName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Error writing to &quot;</span> + outputFileName + <span class="string">&quot;: &quot;</span> + e.getMessage());</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Target file not found.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压缩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> wbw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zipFilePath 压缩文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFolder 解压缩目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(String zipFilePath, String outputFolder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ZipInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(zipFilePath))) &#123;</span><br><span class="line">            <span class="type">ZipEntry</span> <span class="variable">zipEntry</span> <span class="operator">=</span> zipInputStream.getNextEntry();</span><br><span class="line">            <span class="keyword">while</span> (zipEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">entryName</span> <span class="operator">=</span> zipEntry.getName();</span><br><span class="line">                <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outputFolder, entryName);</span><br><span class="line">                <span class="keyword">if</span> (zipEntry.isDirectory()) &#123;</span><br><span class="line">                    newFile.mkdirs();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">File</span>(newFile.getParent()).mkdirs();</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(newFile)) &#123;</span><br><span class="line">                        <span class="type">int</span> length;</span><br><span class="line">                        <span class="keyword">while</span> ((length = zipInputStream.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            fileOutputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                zipEntry = zipInputStream.getNextEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历文件夹，寻找目标文件名，返回文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> wbw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folderPath 文件夹路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetContent 目标文件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">findTargetFileName</span><span class="params">(String folderPath, String targetContent)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(folderPath);</span><br><span class="line">        File[] files = folder.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isFile() &amp;&amp; file.getName().endsWith(<span class="string">&quot;.txt&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file))) &#123;</span><br><span class="line">                        String line;</span><br><span class="line">                        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            content.append(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (content.toString().equals(targetContent)) &#123;</span><br><span class="line">                            <span class="comment">// 找到对应文件</span></span><br><span class="line">                            <span class="keyword">return</span> file.getName();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-spark-版本"><a class="markdownIt-Anchor" href="#3-spark-版本"></a> 3 Spark 版本</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io._</span><br><span class="line"><span class="keyword">import</span> java.util.zip._</span><br><span class="line"><span class="keyword">import</span> java.nio.file.&#123;<span class="type">Paths</span>, <span class="type">Path</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FindNameScala</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> zipFilePath = <span class="string">&quot;src/main/demo/Files.zip&quot;</span> <span class="comment">// ZIP文件路径</span></span><br><span class="line">    <span class="keyword">val</span> unzipFolderPath = <span class="string">&quot;src/main/demo/&quot;</span> <span class="comment">// 解压后的输出文件夹（当前目录）</span></span><br><span class="line">    <span class="keyword">val</span> targetContent = <span class="string">&quot;MSC2023&quot;</span> <span class="comment">// 目标文件内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 解压文件</span></span><br><span class="line">    unzip(zipFilePath, unzipFolderPath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 开始寻找</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;ParallelFileSearch&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> folderPath = <span class="string">&quot;src/main/demo/Files&quot;</span> <span class="comment">// 文件夹路径</span></span><br><span class="line">    <span class="keyword">val</span> textFiles = sc.wholeTextFiles(folderPath) <span class="comment">// 读取所有文件的内容，返回(文件名，内容)对</span></span><br><span class="line">    <span class="keyword">val</span> matchingFiles = textFiles.filter &#123; <span class="keyword">case</span> (_, content) =&gt; content.trim == targetContent &#125;</span><br><span class="line">    <span class="keyword">if</span> (matchingFiles.isEmpty()) &#123;</span><br><span class="line">      println(<span class="string">&quot;Target file not found.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> (filePath, _) = matchingFiles.first() <span class="comment">// 获取第一个匹配的文件名</span></span><br><span class="line">      <span class="keyword">val</span> outputFile = <span class="keyword">new</span> java.io.<span class="type">PrintWriter</span>(<span class="string">&quot;src/main/demo/target.txt&quot;</span>) <span class="comment">// 创建目标文件</span></span><br><span class="line">      <span class="keyword">val</span> fileName = extractFileName(filePath) <span class="comment">// 提取文件名</span></span><br><span class="line">      outputFile.println(fileName) <span class="comment">// 写入文件名</span></span><br><span class="line">      outputFile.close()</span><br><span class="line">      println(<span class="string">s&quot;Target file name written to target.txt: <span class="subst">$fileName</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @author wbw</span></span><br><span class="line"><span class="comment">   * @param zipFilePath     压缩文件路径</span></span><br><span class="line"><span class="comment">   * @param unzipFolderPath 解压缩目录</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unzip</span></span>(zipFilePath: <span class="type">String</span>, unzipFolderPath: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">val</span> zipFile = <span class="keyword">new</span> <span class="type">ZipFile</span>(zipFilePath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> entries = zipFile.entries()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (entries.hasMoreElements) &#123;</span><br><span class="line">      <span class="keyword">val</span> entry = entries.nextElement()</span><br><span class="line">      <span class="keyword">val</span> entryName = entry.getName</span><br><span class="line">      <span class="keyword">val</span> entryPath = <span class="string">s&quot;<span class="subst">$unzipFolderPath</span>/<span class="subst">$entryName</span>&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!entry.isDirectory) &#123;</span><br><span class="line">        <span class="keyword">val</span> inputStream = zipFile.getInputStream(entry)</span><br><span class="line">        <span class="keyword">val</span> outputStream = <span class="keyword">new</span> <span class="type">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(entryPath))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytesRead = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> ( &#123;</span><br><span class="line">          bytesRead = inputStream.read(buffer);</span><br><span class="line">          bytesRead != <span class="number">-1</span></span><br><span class="line">        &#125;) &#123;</span><br><span class="line">          outputStream.write(buffer, <span class="number">0</span>, bytesRead) <span class="comment">// 从输入流读取内容并写入到输出流</span></span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close()</span><br><span class="line">        inputStream.close()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="type">File</span>(entryPath).mkdirs()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    zipFile.close()</span><br><span class="line">    println(<span class="string">&quot;Unzip completed.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 从文件路径中提取文件名</span></span><br><span class="line"><span class="comment">   * @param filePath 文件路径</span></span><br><span class="line"><span class="comment">   * @return 文件名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">extractFileName</span></span>(filePath: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> lastIndex = filePath.lastIndexOf(&#x27;/&#x27;)</span><br><span class="line">    <span class="keyword">if</span> (lastIndex != <span class="number">-1</span>) &#123;</span><br><span class="line">      filePath.substring(lastIndex + <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      filePath</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微软社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微软社 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue子组件中调用父组件中的方法</title>
      <link href="/posts/aec1e412/"/>
      <url>/posts/aec1e412/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>在Vue中，子组件可以通过事件(Event)机制与父组件进行通信，从而调用父组件中的方法。以下是一种常见的方法：</p></div><h2 id="1-在父组件中定义方法"><a class="markdownIt-Anchor" href="#1-在父组件中定义方法"></a> 1 在父组件中定义方法</h2><ul><li>首先，在父组件中定义一个方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;callParentMethod&quot;&gt;调用父组件方法&lt;/button&gt;</span><br><span class="line">    &lt;child-component @custom-event=&quot;handleCustomEvent&quot;&gt;&lt;/child-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    callParentMethod() &#123;</span><br><span class="line">      console.log(&#x27;父组件的方法被调用&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCustomEvent(payload) &#123;</span><br><span class="line">      console.log(&#x27;自定义事件在父组件被触发，数据：&#x27;, payload);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-在子组件中触发事件"><a class="markdownIt-Anchor" href="#2-在子组件中触发事件"></a> 2 在子组件中触发事件</h2><ul><li>在子组件中，通过<code>$emit</code>方法触发一个自定义事件，从而与父组件通信</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;callParentMethod&quot;&gt;调用父组件方法&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    callParentMethod() &#123;</span><br><span class="line">      this.$emit(&#x27;custom-event&#x27;, &#123; data: &#x27;来自子组件的数据&#x27; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>在这个例子中，当子组件中的按钮被点击时，<code>callParentMethod</code>方法会调用<code>this.$emit('custom-event', ...)</code>，触发一个名为<code>custom-event</code>的自定义事件，并传递一个数据对象作为参数。</li></ul><h2 id="3-在父组件中监听事件"><a class="markdownIt-Anchor" href="#3-在父组件中监听事件"></a> 3 在父组件中监听事件</h2><ul><li><p>在父组件的模板中使用<code>@custom-event</code>来监听子组件发出的事件，并在相应的处理方法中调用父组件的方法</p></li><li><p>通过这种方式，子组件就能够调用父组件中的方法，实现了子组件与父组件之间的通信。记住，事件名<code>custom-event</code>应该在父组件中监听和子组件中触发时保持一致。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 系统字体安装</title>
      <link href="/posts/2de821dc/"/>
      <url>/posts/2de821dc/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>在安装之前可以先使用命令 <code>fc-list :lang=zh</code> 查看已经安装的中文字体，最后安装后还使用该命令查看新安装的字体</p></div><h2 id="1-创建目录"><a class="markdownIt-Anchor" href="#1-创建目录"></a> 1、创建目录</h2><ul><li>在Linux中创建目录 <code>/usr/share/fonts/myfonts</code></li></ul><h2 id="2-拷贝字体"><a class="markdownIt-Anchor" href="#2-拷贝字体"></a> 2、拷贝字体</h2><ul><li>将Windows下的字体拷贝到<code>myfonts</code>目录中。<br />Windows 中的字体在目录 <code>C:\Windows\Fonts</code> 中，选择你需要的字体拷贝。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/20230809195344.png" alt="img.png" /></p><h2 id="3-目录权限设置"><a class="markdownIt-Anchor" href="#3-目录权限设置"></a> 3、目录权限设置</h2><ul><li>为myfonts目录设置权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 myfonts</span><br></pre></td></tr></table></figure><h2 id="4-安装字体索引指令"><a class="markdownIt-Anchor" href="#4-安装字体索引指令"></a> 4、安装字体索引指令</h2><ul><li>在centos上，使用如下命令进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y fontconfig mkfontscale</span><br></pre></td></tr></table></figure><ul><li>在ubuntu上，使用如下命令进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install fontconfig xfonts-utils</span><br></pre></td></tr></table></figure><h2 id="5-建立字体索引信息更新字体缓存"><a class="markdownIt-Anchor" href="#5-建立字体索引信息更新字体缓存"></a> 5、建立字体索引信息更新字体缓存</h2><ul><li>进入<code>myfonts</code>目录安装字体，建立索引更新缓存</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/fonts/myfonts</span><br><span class="line">mkfontscale &amp;&amp; mkfontdir &amp;&amp; fc-cache -fv</span><br></pre></td></tr></table></figure><h2 id="6-验证结果"><a class="markdownIt-Anchor" href="#6-验证结果"></a> 6、验证结果</h2><ul><li>验证字体是否安装成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list :lang=zh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上Pandoc的使用</title>
      <link href="/posts/557acb69/"/>
      <url>/posts/557acb69/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>如果你需要在不同的文件格式之间相互转换，多半听说或使用过文档转换的瑞士军刀——Pandoc。事实上，不仅人类知道 Pandoc，最近很火的人工智能 ChatGPT 也知道「将 Markdown 转换为 docx」，首选方案是使用 Pandoc。</p></div><div class="tag link"><a class="link-card" title="Pandoc 官网" href="https://www.pandoc.org/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/%E8%B7%AF%E5%BE%84.svg"/></div><div class="right"><p class="text">Pandoc 官网</p><p class="url">https://www.pandoc.org/</p></div></a></div><h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 安装</h2><ul><li>下载压缩包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/jgm/pandoc/releases/download/2.14.0.3/pandoc-2.14.0.3-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf pandoc-2.14.0.3-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>建立软链接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /root/pandoc-2.14.0.3/bin/pandoc /usr/bin/pandoc</span><br></pre></td></tr></table></figure><ul><li>latex引擎安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install texlive-xetex</span><br></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -v </span><br></pre></td></tr></table></figure><h2 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2 使用</h2><div class="tip success"><p>To see the output created by each of the commands below, click on the name of the output file:</p></div><ul><li>HTML fragment</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.txt -o example1.html</span><br></pre></td></tr></table></figure><ul><li>Standalone HTML file</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -o example2.html</span><br></pre></td></tr></table></figure><ul><li>HTML with table of contents, CSS, and custom footer</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s --toc -c pandoc.css -A footer.html MANUAL.txt -o example3.html</span><br></pre></td></tr></table></figure><ul><li>LaTeX</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -o example4.tex</span><br></pre></td></tr></table></figure><ul><li>From LaTeX to markdown</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s example4.tex -o example5.text</span><br></pre></td></tr></table></figure><ul><li>reStructuredText</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s -t rst --toc MANUAL.txt -o example6.text</span><br></pre></td></tr></table></figure><ul><li>Rich text format (RTF)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -o example7.rtf</span><br></pre></td></tr></table></figure><ul><li>Beamer slide show</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -t beamer SLIDES -o example8.pdf</span><br></pre></td></tr></table></figure><ul><li>DocBook XML</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s -t docbook MANUAL.txt -o example9.db</span><br></pre></td></tr></table></figure><ul><li>Man page</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s -t man pandoc.1.md -o example10.1</span><br></pre></td></tr></table></figure><ul><li>ConTeXt</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s -t context MANUAL.txt -o example11.tex</span><br></pre></td></tr></table></figure><ul><li>Converting a web page to markdown</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s -r html http://www.gnu.org/software/make/ -o example12.text</span><br></pre></td></tr></table></figure><ul><li>From markdown to PDF</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.txt --pdf-engine=xelatex -o example13.pdf</span><br></pre></td></tr></table></figure><ul><li>PDF with numbered sections and a custom LaTeX header</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -N --variable <span class="string">&quot;geometry=margin=1.2in&quot;</span> --variable mainfont=<span class="string">&quot;Palatino&quot;</span> --variable sansfont=<span class="string">&quot;Helvetica&quot;</span> --variable monofont=<span class="string">&quot;Menlo&quot;</span> --variable fontsize=12pt --variable version=2.0 MANUAL.txt --include-in-header fancyheaders.tex --pdf-engine=lualatex --toc -o example14.pdf</span><br></pre></td></tr></table></figure><ul><li>ipynb (Jupyter notebook)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc example15.md -o example15.ipynb</span><br></pre></td></tr></table></figure><ul><li>HTML slide shows</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s --mathml -i -t dzslides SLIDES -o example16a.html</span><br><span class="line"></span><br><span class="line">pandoc -s --webtex -i -t slidy SLIDES -o example16b.html</span><br><span class="line"></span><br><span class="line">pandoc -s --mathjax -i -t revealjs SLIDES -o example16d.html</span><br></pre></td></tr></table></figure><ul><li>TeX math in HTML</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pandoc math.text -s -o mathDefault.html</span><br><span class="line"></span><br><span class="line">pandoc math.text -s --mathml  -o mathMathML.html</span><br><span class="line"></span><br><span class="line">pandoc math.text -s --webtex  -o mathWebTeX.html</span><br><span class="line"></span><br><span class="line">pandoc math.text -s --mathjax -o mathMathJax.html</span><br><span class="line"></span><br><span class="line">pandoc math.text -s --katex   -o mathKaTeX.html</span><br></pre></td></tr></table></figure><ul><li>Syntax highlighting of delimited code blocks</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pandoc code.text -s --highlight-style pygments -o example18a.html</span><br><span class="line"></span><br><span class="line">pandoc code.text -s --highlight-style kate -o example18b.html</span><br><span class="line"></span><br><span class="line">pandoc code.text -s --highlight-style monochrome -o example18c.html</span><br><span class="line"></span><br><span class="line">pandoc code.text -s --highlight-style espresso -o example18d.html</span><br><span class="line"></span><br><span class="line">pandoc code.text -s --highlight-style haddock -o example18e.html</span><br><span class="line"></span><br><span class="line">pandoc code.text -s --highlight-style tango -o example18f.html</span><br><span class="line"></span><br><span class="line">pandoc code.text -s --highlight-style zenburn -o example18g.html</span><br></pre></td></tr></table></figure><ul><li>GNU Texinfo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.txt -s -o example19.texi</span><br></pre></td></tr></table></figure><ul><li>OpenDocument XML</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.txt -s -t opendocument -o example20.xml</span><br></pre></td></tr></table></figure><ul><li>ODT (OpenDocument Text, readable by OpenOffice)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.txt -o example21.odt</span><br></pre></td></tr></table></figure><ul><li>MediaWiki markup</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s -t mediawiki --toc MANUAL.txt -o example22.wiki</span><br></pre></td></tr></table></figure><ul><li>EPUB ebook</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.txt -o MANUAL.epub</span><br></pre></td></tr></table></figure><ul><li>Markdown citations</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s --bibliography biblio.bib --citeproc CITATIONS -o example24a.html</span><br><span class="line"></span><br><span class="line">pandoc -s --bibliography biblio.json --citeproc --csl chicago-fullnote-bibliography.csl CITATIONS -o example24b.html</span><br><span class="line"></span><br><span class="line">pandoc -s --bibliography biblio.yaml --citeproc --csl ieee.csl CITATIONS -t man -o example24c.1</span><br></pre></td></tr></table></figure><ul><li>Textile writer</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -t textile -o example25.textile</span><br></pre></td></tr></table></figure><ul><li>Textile reader</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s example25.textile -f textile -t html -o example26.html</span><br></pre></td></tr></table></figure><ul><li>Org-mode</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -o example27.org</span><br></pre></td></tr></table></figure><ul><li>AsciiDoc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -t asciidoc -o example28.txt</span><br></pre></td></tr></table></figure><ul><li>Word docx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s MANUAL.txt -o example29.docx</span><br></pre></td></tr></table></figure><ul><li>LaTeX math to docx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s math.tex -o example30.docx</span><br></pre></td></tr></table></figure><ul><li>DocBook to markdown</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -f docbook -t markdown -s howto.xml -o example31.text</span><br></pre></td></tr></table></figure><ul><li>MediaWiki to html5</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -f mediawiki -t html5 -s haskell.wiki -o example32.html</span><br></pre></td></tr></table></figure><ul><li>Chunked HTML</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -t chunkedhtml --split-level=2 --toc --toc-depth=2 --number-sections -o example33 MANUAL.txt</span><br></pre></td></tr></table></figure><ul><li>Docx with a reference docx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc --reference-doc twocolumns.docx -o UsersGuide.docx MANUAL.txt</span><br></pre></td></tr></table></figure><ul><li>Docx to markdown, including math</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s example30.docx -t markdown -o example35.md</span><br></pre></td></tr></table></figure><ul><li>EPUB to plain text</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc MANUAL.epub -t plain -o example36.text</span><br></pre></td></tr></table></figure><ul><li>Using a template to produce a table from structured data</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc fishwatch.yaml -t rst --template fishtable.rst -o fish.rst <span class="comment"># see also the partial species.rst</span></span><br></pre></td></tr></table></figure><ul><li>Converting a bibliography from BibTeX to CSL JSON</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc biblio.bib -t csljson -o biblio2.json</span><br></pre></td></tr></table></figure><ul><li>Producing a formatted version of a bibliography</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc biblio.bib --citeproc --csl ieee.csl -s -o biblio.html</span><br></pre></td></tr></table></figure><h2 id="3-中文乱码问题"><a class="markdownIt-Anchor" href="#3-中文乱码问题"></a> 3 中文乱码问题</h2><p>中文乱码问题，大多与字体有关，解决方案详见文章</p><div class="tag link"><a class="link-card" title="Linux 系统字体安装" href="https://tankenqi.cn/posts/2de821dc/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/20201027105140931.png"/></div><div class="right"><p class="text">Linux 系统字体安装</p><p class="url">https://tankenqi.cn/posts/2de821dc/</p></div></a></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
            <tag> Linux </tag>
            
            <tag> Pandoc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S集群环境搭建(Containerd作为容器)</title>
      <link href="/posts/9d39de82/"/>
      <url>/posts/9d39de82/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前述"><a class="markdownIt-Anchor" href="#1-前述"></a> 1 前述</h2><h3 id="11-云原生定义"><a class="markdownIt-Anchor" href="#11-云原生定义"></a> 1.1 云原生定义</h3><ul><li><strong>Pivotal《传统应用和SOA向云原生转型指南》（2015）的云原生的特征：</strong><ul><li>符合 12 要素应用<ul><li><font color='blue'>基准代码</font>：一份基准代码，多份部署（类似于Git版本控制系统的main分支）；</li><li><font color='blue'>显示声明所有依赖关系</font>：通过依赖清单，确切地声明所有依赖项；</li><li><font color='blue'>把后端服务当作附加资源</font>：各种后端服务（如数据库、消息队列、邮件服务、缓存系统），不区别对待本地或第三方服务；</li><li><font color='blue'>构建、发布、运行</font>：严格区分构建、发布、运行这三个步骤；</li><li><font color='blue'>无状态进程</font>：应用的进程必须无状态；</li><li><font color='blue'>端口绑定</font>：互联网应用通过端口绑定来提供服务，并监听发送至该端口的请求。应用完全自我加载，不依赖于任何网络服务器；</li><li><font color='blue'>并发</font>：通过进程模型进行扩展。进程是一等公民；</li><li><font color='blue'>易处理</font>：进程可以瞬间开启或停止，有利于快速、弹性的伸缩应用。进程应追求最小启动时间；进程一旦接受终止信号就会优化的终止；进程在面对突然死亡时保持健壮；</li><li><font color='blue'>开发环境与线上环境等价</font>：尽可能的保持开发，预发布，线上环境相同，以尽量做到持续部署；</li><li><font color='blue'>日志</font>：应用本身从不存储自己的输出流，不应该试图去写或者管理日志文件，相反，每一个运行的进程都会直接的标准输出（stdout）事件流；</li><li><font color='blue'>管理进程</font>：后台管理任务当作一次性进程运行；</li></ul></li><li>面向微服务架构<ul><li>微服务将<font color='blue'>单体系统</font>分解为多个“仅做好一件事”的可独立部署的服务。这件事通常代表某项业务能力，或者最小可提供业务价值的“原子“服务单元。具备以下优点：<ul><li><font color='blue'>变更周期解耦</font>：只要变更限于单一有界的环境，并且服务继续履行其现有合约；实现了更频繁和快速的部署，从而实现了持续的价值流动；</li><li><font color='blue'>减少业务领域和现有代码的学习负担</font>；</li><li><font color='blue'>可以加快采用新技术的步伐</font>；</li><li><font color='blue'>提供独立、高效的服务扩展</font>；</li></ul></li></ul></li><li>自服务敏捷架构（可以认为是DevOps）：<ul><li>一个能够持续部署和运行这些微服务的平台；如代码以Git形式“推送”。 然后，自服务敏捷平台构建应用程序工件，构建应用程序环境，部署应用程序，并启动必要的进程。 团队不必考虑他们的代码在哪里运行或如何到达那里，这些对用户都是透明得，因为平台会关注这些。</li></ul></li><li>基于 API 的协作</li><li>抗脆弱性</li></ul></li><li><strong>云原生计算基金会（2015）定义的特征</strong><ul><li>应用容器化</li><li>面向微服务架构</li><li>应用支持容器的编排制度</li></ul></li><li><strong>云原生计算基金会（2018）定义</strong><ul><li>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API</li><li>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更</li></ul></li></ul><h3 id="12-容器-虚拟机-docker-openstack-和-k8s"><a class="markdownIt-Anchor" href="#12-容器-虚拟机-docker-openstack-和-k8s"></a> 1.2 容器、虚拟机、Docker、Openstack 和 K8S</h3><ul><li><strong>容器&amp;虚拟机</strong>：均为虚拟化技术，容器更为轻量化、效率更高、启动更快；虚拟机需数分钟启动，容器仅需数十毫秒；</li><li><strong>Docker</strong>： 容器化虚拟技术事实上的标准；</li><li><strong>OpenStack</strong>：分布式的虚拟机服务平台，相比于普通的虚拟机软件（如Vmare），多了分布式虚拟机调度管理的功能和节点的负载均衡；</li><li><strong>K8S</strong>：分布式的容器调度管理平台，相比于Docker，多了分布式的容器调度管理和节点的负载均衡；</li><li><strong>注意</strong>：常见的中文资料均言K8S是容器编排软件，这里的编排是指调度、管理的意思，而非工作流编排的意思，容易有误导性；</li><li><strong>注意</strong>：无论是Openstack还是K8S，均不支持跨节点的容器或虚拟机的创建；所以将多台电脑合并成一台电脑的想法是不现实的；</li></ul><h3 id="13-k8s-和-云原生"><a class="markdownIt-Anchor" href="#13-k8s-和-云原生"></a> 1.3 K8S 和 云原生</h3><p>在单机上运行容器，无法发挥它的最大效能，只有形成集群，才能最大程度发挥容器的良好隔离、资源分配与编排管理的优势，而对于容器的编排管理，Swarm、Mesos 和 Kubernetes 的大战已经基本宣告结束，Kubernetes 成为了无可争议的赢家。</p><ul><li>Kubernetes 成为云原生应用的基石</li><li>有机会成为跨云的真正的云原生应用的操作系统</li></ul><h3 id="14-k8s-介绍"><a class="markdownIt-Anchor" href="#14-k8s-介绍"></a> 1.4 K8S 介绍</h3><ul><li><strong><font color='red'>官方</font></strong>：<strong>Kubernetes</strong> 也称为 <strong>K8S</strong>，是用于自动部署、扩缩和管理容器化应用程序的开源系统。</li><li><strong><font color='red'>发展历史</font></strong>：由<strong>Google</strong>设计并捐赠给<strong>Cloud Native Computing Foundation</strong>（今属<strong>Linux</strong>基金会）来使用。</li><li><strong><font color='red'>能力</font></strong>：<strong>Google</strong> 每周运行数十亿个容器，能够在不扩张运维团队的情况下进行规模扩展。</li><li><strong><font color='red'>作用</font></strong>： 相当于一个操作系统，可以快速提供<strong>PaaS</strong>服务：1）创建各种容器化测试化环境；2）发布各种容器化服务；3）快速安装各种容器化服务，如MongoDB、<strong>Hbase</strong>、<strong>Postgresql</strong>、<strong>Redis</strong>、<strong>Spark</strong>等；快速提供IaaS服务：通过安装<strong>Openstack</strong>或<strong>KubeVirt</strong>等软件；快速提供<strong>FaaS</strong>服务：通过安装<strong>Kube</strong> <strong>Native</strong>等软件；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230414170948460.png" alt="image-20230414170948460" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230414171119324.png" alt="image-20230414171119324" /></p><h3 id="15-基本概念"><a class="markdownIt-Anchor" href="#15-基本概念"></a> 1.5 基本概念</h3><ul><li><p><strong>Container</strong>：轻量级的系统虚拟化技术，使用namespace隔离环境。</p></li><li><p><strong>Pod</strong>：</p></li><li><ul><li><strong>K8S</strong> 的调度的基本单位，<strong>Pod</strong>是一组紧密关联的容器集合，内部的容器共享PID、IPC、Network和UTS namespace。可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415141540422.png" alt="image-20230415141540422" /></p></li></ul><p>​Pod的设计理念基础是微服务，不同类型的业务组合由不同类型的Pod执行，一个Pod对应一个微服务</p><ul><li><ul><li>K8S中，采用manifest（yaml或json）定义对象，比如nginx服务（包含了一个nginx 容器image）定义为：</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br></pre></td></tr></table></figure><ul><li><ul><li><strong>Node:</strong> 是Pod运行的主机，可以为物理机，也可以为虚拟机。每个Node上要运行container runtime （docker或者rkt）、kubelet和kube-proxy服务</li><li><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415142123300.png" alt="image-20230415142123300" /></li></ul></li><li><ul><li><strong>Service:</strong> 一个Pod只是一个运行服务的实例，可能在一个节点上停止，在另一个节点以一个新的IP启动一个新的Pod。在K8S集群中，客户端需要访问的服务就是Service对象。每个Service会对应一个集群内部有效的虚拟IP，集群内部通过虚拟IP访问一个服务。</li></ul></li><li><ul><li><strong>Kubelet:</strong>  每个Node的任务和资源管理</li></ul></li><li><ul><li><strong>Kube-proxy:</strong>  负责每个节点的硬件负载均衡</li></ul></li></ul><h3 id="16-k8s-常见命令"><a class="markdownIt-Anchor" href="#16-k8s-常见命令"></a> 1.6 K8S 常见命令</h3><ul><li><strong>运行一个Nginix容器：</strong><ul><li><code>kubectl run --image=nginx:alpine nginx-app --port=80</code></li></ul></li><li><strong>Kubectl 命令：</strong><ul><li><code>kubectl get - 类似于 docker ps，查询资源列表</code></li><li><code>kubectl describe - 类似于 docker inspect，获取资源的详细信息</code></li><li><code>kubectl logs - 类似于 docker logs，获取容器的日志</code></li><li><code>kubectl exec - 类似于 docker exec，在容器内执行一个命令</code></li><li><code>kubectl create -f file.yaml – 根据yaml创建Deployment资源</code></li><li><code>kubectl delete 删除命令，可删除node、pod、svc、depolyment</code></li></ul></li><li><strong>yaml 定义 Pod：</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul><li><strong>Volume：</strong><ul><li>一个<strong>Pod</strong>一旦发生异常，<strong>Pod</strong> 产生的数据会随着 <strong>Pod</strong> 消亡而自动消失。<strong>Volume</strong> 用于持久化容器数据。</li><li>如：为 <strong>redis</strong> 容器指定一个 <strong>hostPath</strong> 来存储 <strong>redis</strong> 数据</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-persistent-storage</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data/redis</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-persistent-storage</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data/</span></span><br></pre></td></tr></table></figure><ul><li><strong>Service：</strong><ul><li>kubectl创建Pod，Pob的IP地址会随着Pod的重启而变化</li><li>为了访问Pod提供的服务，采用Service提供为一组Pod一个统一的入口，并提供负载均衡和<strong>自动服务发现</strong>。<ul><li><code>kubectl expose deployment nginx-app --port=80 --target-port=80 --type=NodePort</code></li></ul></li></ul></li><li><strong>Replicas set：</strong><ul><li>在一个Service中,可为Pod设置数个副本，以确保服务永不掉线<ul><li><code>kubectl scale --replicas=3 deployment/nginx-app</code></li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415143046325.png" alt="image-20230415143046325" /></p><ul><li><strong>滚动升级（Rolling Update）：</strong><ul><li>滚动升级（Rolling Update）通过逐个副本容器替代升级的方式来实现无中断的服务升级：<ul><li><code>kubectl rolling-update frontend-v1 frontend-v2 --image=image:v2</code></li></ul></li><li>滚动升级中若发生错误，可随时回滚：<ul><li><code>kubectl rolling-update frontend-v1 frontend-v2 --rollback</code></li></ul></li></ul></li><li><strong>资源限制：</strong><ul><li>K8S通过 cgroups 提供容器资源管理的功能，可限制每个容器的 CPU 和内存使用，比如对于刚才创建的 deployment，可以通过下面的命令限制 nginx 容器最多只用 50% 的 CPU 和 128MB 的内存：<ul><li><code>kubectl set resources deployment nginx-app -c=nginx --limits=cpu=500m,memory=128Mi</code></li></ul></li><li>或者在yaml中指定资源限制</li></ul></li><li><strong>健康检查：</strong><ul><li>K8S Kubernetes 提供了两种探针（Probe，支持 exec、tcpSocket 和 http 方式）来探测容器的状态：<ul><li>LivenessProbe：探测应用是否处于健康状态，如果不健康则删除并重新创建容器</li><li>ReadinessProbe：探测应用是否启动完成并且处于正常服务状态，如果不正常则不会接收来自 Kubernetes Service 的流量</li></ul></li></ul></li></ul><h3 id="17-k8s-常用运维命令"><a class="markdownIt-Anchor" href="#17-k8s-常用运维命令"></a> 1.7 K8S 常用运维命令</h3><ul><li><strong>查看pod，及所在的节点：</strong><ul><li><code>kubectl get pods -o wide</code></li></ul></li><li><strong>若有节点warn，回收垃圾失败：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain --delete-local-data --ignore-daemonsets NODENAME</span><br><span class="line">kubectl uncordon NODENAME</span><br></pre></td></tr></table></figure><h2 id="2-k8s-集群基础环境部署"><a class="markdownIt-Anchor" href="#2-k8s-集群基础环境部署"></a> 2 K8S 集群基础环境部署</h2><p class='p red'>若服务器之前搭建过 K8S 集群，需要彻底删除</p><p><span style="color:red">参考</span>：<a href="https://blog.csdn.net/qq_43159578/article/details/124131709">https://blog.csdn.net/qq_43159578/article/details/124131709</a></p><ul><li>停止所有的Kubernetes服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop kubelet</span><br><span class="line">sudo systemctl stop containerd</span><br></pre></td></tr></table></figure><ul><li>删除Kubernetes软件包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove kubeadm kubectl kubelet kubernetes-cni -y</span><br></pre></td></tr></table></figure><ul><li>删除配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除残留文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf /root/.kube</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/cni/net.d</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/kubernetes/*</span><br></pre></td></tr></table></figure><ul><li>删除etcd数据目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/etcd</span><br></pre></td></tr></table></figure><ul><li>清除iptables或者ipvs的配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo ipvsadm -C</span></span><br><span class="line"><span class="comment"># sudo iptables -F &amp;&amp; sudo iptables -t nat -F &amp;&amp; sudo iptables -t mangle -F &amp;&amp; sudo # # iptables -Xkubec</span></span><br></pre></td></tr></table></figure><ul><li><font color='red'>如果只是想重新部署集群</font></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><p><code>kubeadm reset</code> 命令用于清除当前节点上所有与 <code>kubeadm init</code> 或 <code>kubeadm join</code> 命令创建的 Kubernetes 集群相关的状态。其主要作用如下：</p><ol><li><p>移除 Kubernetes 集群相关的系统服务，如 kubelet 和 kube-proxy。</p></li><li><p>删除所有在当前节点上创建的 Kubernetes 对象，包括 Pod、Service、Deployment 等。</p></li><li><p>移除 etcd 中与当前节点相关的信息，如节点标识、配置信息等。</p></li><li><p>删除 Kubernetes 数据目录，包括证书、密钥、kubeconfig 文件等。</p></li></ol><p>使用 <code>kubeadm reset</code> 命令可以清除当前节点上的所有 Kubernetes 相关状态，以便重新创建新的 Kubernetes 集群或者将当前节点加入到另一个 Kubernetes 集群中。在进行 <code>kubeadm reset</code> 操作之前，应该先备份当前节点上的重要数据和配置信息，以便在需要时进行恢复。</p><h3 id="21-服务器"><a class="markdownIt-Anchor" href="#21-服务器"></a> 2.1 服务器</h3><ul><li><strong>网络资源：<strong>各节点间通过</strong>千兆交换机</strong>互联（非光纤交换机）</li><li><strong>管理节点：</strong><ul><li><font color='blue'>Gisweb4，Gisweb3</font></li></ul></li><li><strong>计算节点：</strong><ul><li><font color='blue'>Gisweb3，GISweb2，dellm640-01, Gisweb4, dellslot03, dellslot4</font></li></ul></li><li><strong>持久化存储资源：</strong><ul><li>目前采用：<ul><li><font color='blue'>nfs-client: 23服务器的/mnt/storage/k8s/pv</font></li></ul></li></ul></li><li><strong>Node1（刀片3）：</strong><ul><li><font color='blue'>子网 IP：192.168.0.177</font></li><li><font color='blue'>CPU：Intel® Xeon® Silver 4216 CPU @ 2.10GHz；32核心</font><font color='red'>，64线程。</font></li><li><font color='blue'>内存：64GB（32GB*2），每根DDR4，</font><font color='red'>3000Mhz</font></li></ul></li><li><strong>Node2（刀片4）：</strong><ul><li><font color='blue'>子网 IP：192.168.0.209</font></li><li><font color='blue'>CPU：Intel® Xeon® Silver 4216 CPU @ 2.10GHz；32核心</font>，<font color='red'>64线程。</font></li><li><font color='blue'>内存：64GB（32GB*2），每根DDR4</font><font color='red'>3200Mhz</font></li></ul></li></ul><h3 id="22-安装过程"><a class="markdownIt-Anchor" href="#22-安装过程"></a> 2.2 安装过程</h3><h4 id="221-前提条件"><a class="markdownIt-Anchor" href="#221-前提条件"></a> 2.2.1 前提条件</h4><p>a.    节点之中不可以有重复的主机名、<code>MAC</code> 地址或 <code>product_uuid</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/class/dmi/id/product_uuid</span><br></pre></td></tr></table></figure><p>b.    检查网络适配器：若有多个网卡，确保每个node的子网通过默认路由可达</p><p>c.    防火墙开放端口<font color='red'>(所有节点)</font>：</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415145138479.png" alt="image-20230415145138479" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br><span class="line">firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=6443/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=2379-2380/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=10250/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=10259/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=10257/tcp --permanent</span><br></pre></td></tr></table></figure><p>d.    关闭防火墙<font color='red'>(所有节点）</font>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld NetworkManager</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld NetworkManager</span><br></pre></td></tr></table></figure><p>e.    关闭交换分区并禁用 SELinux<font color='red'>（所有节点）</font>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 交换分区</span></span><br><span class="line">free -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 `SELinux` 设置为 `permissive` 模式（相当于将其禁用）  第一行是临时禁用，第二行是永久禁用</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap；第一行是临时禁用，第二行是永久禁用</span></span><br><span class="line">swapoff -a  </span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许 iptables 检查桥接流量 （K8s 官方要求）</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让配置生效</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>f.    时间同步<font color='red'>（所有节点）</font>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line">systemctl start chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure><p>g.    设置主机名并添加 ip 映射<font color='red'>（所有节点）</font>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以 gisweb4 为例</span></span><br><span class="line"><span class="comment"># 查看主机名cat </span></span><br><span class="line">hostname</span><br><span class="line"><span class="comment"># 设置主机名</span></span><br><span class="line">hostnamectl set-hostname gisweb4</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 ip 映射</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;125.250.153.23  gisweb4&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;125.250.153.23  gisweb4&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="comment"># 两台无外网ip的刀片添加内网ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/hosts 文件内容如下：</span></span><br><span class="line">192.168.0.203 gisweb1</span><br><span class="line">192.168.0.202 gisweb2</span><br><span class="line">192.168.0.204 gisweb4</span><br><span class="line">192.168.0.208 gisweb3</span><br><span class="line">192.168.0.176 dellm640-01</span><br><span class="line">192.168.0.177 dellm640-03</span><br><span class="line">192.168.0.209 dellslot04</span><br><span class="line"></span><br><span class="line">125.220.153.26 gisweb1</span><br><span class="line">125.220.153.25 gisweb2</span><br><span class="line">125.220.153.22 gisweb3</span><br><span class="line">125.220.153.23 gisweb4</span><br><span class="line">125.220.153.28 dellm640-01</span><br></pre></td></tr></table></figure><h4 id="222-升级-linux-内核到最新font-colorred所有节点font"><a class="markdownIt-Anchor" href="#222-升级-linux-内核到最新font-colorred所有节点font"></a> 2.2.2 升级 Linux 内核到最新<font color='red'>（所有节点）</font>：</h4><p><strong>清除缓存，重新构建缓存：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">yum makecache &amp; yum -y update</span><br></pre></td></tr></table></figure><p><strong><font color='red'>参考链接</font>：<em><font color='cyan'><a href="https://zhuanlan.zhihu.com/p/368879345">https://zhuanlan.zhihu.com/p/368879345</a></font></em></strong></p><h4 id="223-转发-ipv4-并让-iptables-看到桥接流量font-colorred所有节点font"><a class="markdownIt-Anchor" href="#223-转发-ipv4-并让-iptables-看到桥接流量font-colorred所有节点font"></a> 2.2.3 转发 IPv4 并让 iptables 看到桥接流量<font color='red'>（所有节点）</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a.    验证br_netfilter是否已经加载</span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b.    加载br_netfilter模块：</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">c.    iptabels桥接</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">overlay</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward                 = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用 sysctl 参数而不重新启动</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h4 id="224-安装-ipvsadmfont-colorred所有节点font"><a class="markdownIt-Anchor" href="#224-安装-ipvsadmfont-colorred所有节点font"></a> 2.2.4  安装 ipvsadm<font color='red'>（所有节点）</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yum install ipvsadm ipset sysstat conntrack libseccomp -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/ipvs.conf</span></span><br><span class="line"><span class="string">ip_vs</span></span><br><span class="line"><span class="string">ip_vs_rr</span></span><br><span class="line"><span class="string">ip_vs_wrr</span></span><br><span class="line"><span class="string">ip_vs_sh</span></span><br><span class="line"><span class="string">nf_conntrack</span></span><br><span class="line"><span class="string">ip_tables</span></span><br><span class="line"><span class="string">ip_set</span></span><br><span class="line"><span class="string">xt_set</span></span><br><span class="line"><span class="string">ipt_set</span></span><br><span class="line"><span class="string">ipt_rpfilter</span></span><br><span class="line"><span class="string">ipt_REJECT</span></span><br><span class="line"><span class="string">ipip</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart systemd-modules-load.service</span><br><span class="line"></span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure><h4 id="225-修改内核参数font-colorred所有节点lb除外font"><a class="markdownIt-Anchor" href="#225-修改内核参数font-colorred所有节点lb除外font"></a> 2.2.5 修改内核参数<font color='red'>（所有节点，lb除外）</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">fs.may_detach_mounts = 1</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=89100</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl =15</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_orphans = 327680</span></span><br><span class="line"><span class="string">net.ipv4.tcp_orphan_retries = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.ip_conntrack_max = 65536</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0</span></span><br><span class="line"><span class="string">net.core.somaxconn = 16384</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv6.conf.all.disable_ipv6 = 0</span></span><br><span class="line"><span class="string">net.ipv6.conf.default.disable_ipv6 = 0</span></span><br><span class="line"><span class="string">net.ipv6.conf.lo.disable_ipv6 = 0</span></span><br><span class="line"><span class="string">net.ipv6.conf.all.forwarding = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sysctl --systemS</span><br></pre></td></tr></table></figure><h4 id="226-安装container-runtimefont-colorred选用containerd弃用dockerfont"><a class="markdownIt-Anchor" href="#226-安装container-runtimefont-colorred选用containerd弃用dockerfont"></a> 2.2.6 安装Container Runtime<font color='red'>(选用containerd,弃用docker)</font>：</h4><ul><li><strong>Docker-engine+cir-dockerd方案（<font color='red'>舍弃</font>）</strong>：从kubernetes 1.24开始，dockershim已经从kubelet中移除，但因为历史问题docker却不支持kubernetes主推的CRI（容器运行时接口）标准，需要在kubelet和docker之间加上一个中间层cri-docker。cri-docker是一个支持CRI标准的shim。一头通过CRI跟kubelet交互，另一头跟docker api交互，从而间接的实现了kubernetes以docker作为容器运行时。但是这种架构缺点也很明显，<strong>调用链更长，效率更低</strong>。因此选用containerd作为容器runtime</li><li><strong>containerd</strong>方案: <strong>containerd</strong>是一个<strong>docker</strong>的容器<strong>runtime</strong>，成为<strong>CNCF</strong>的官方项目</li></ul><p>官方安装教程：<a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md">https://github.com/containerd/containerd/blob/main/docs/getting-started.md</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装containerd.io</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install containerd.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装CNI插件</span></span><br><span class="line"><span class="comment"># i.下载cni-plugins.tar 从https://github.com/containernetworking/plugins/releases</span></span><br><span class="line"><span class="comment"># 在线下载：</span></span><br><span class="line"><span class="comment"># wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz</span></span><br><span class="line"><span class="comment"># ii.在/opt/cni/bin下解压：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把22上的拷贝到没有公网ip的服务器上</span></span><br><span class="line"><span class="comment"># scp -P22 /opt/cni/bin/cni-plugins-linux-amd64-v1.1.1.tgz root@192.168.0.203:/opt/cni/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/cni/bin</span><br><span class="line"><span class="built_in">cd</span> /opt/cni/bin</span><br><span class="line">tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务：</span></span><br><span class="line">systemctl restart containerd</span><br><span class="line"><span class="comment"># 开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置systemd cgroup驱动</span></span><br><span class="line"><span class="comment"># 修改配置文件，将 SystemdCgroup 改为 true 注意配置项是区分大小写的</span></span><br><span class="line">containerd config default | sudo <span class="built_in">tee</span> /etc/containerd/config.toml</span><br><span class="line">vim /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]</span><br><span class="line">  ...</span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">    SystemdCgroup = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 并将 sandbox_image 地址修改为国内的地址</span></span><br><span class="line">并且将 sandbox_image = <span class="string">&quot;registry.k8s.io/pause:3.6&quot;</span></span><br><span class="line">修改为 sandbox_image = <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 containerd</span></span><br><span class="line">systemctl restart containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动成功后可以查看到监听的端口</span></span><br><span class="line">netstat -nlput | grep containerd</span><br><span class="line">tcp        0      0 127.0.0.1:36669         0.0.0.0:*               LISTEN      8665/containerd      off (0.00/0/0)</span><br></pre></td></tr></table></figure><h4 id="227-在所有电脑上安装-kubeadm-kubelet-and-kubectlfont-colorred所有节点font"><a class="markdownIt-Anchor" href="#227-在所有电脑上安装-kubeadm-kubelet-and-kubectlfont-colorred所有节点font"></a> 2.2.7 在所有电脑上安装 kubeadm, kubelet and kubectl<font color='red'>（所有节点）</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.    kubeadm: the command to bootstrap the cluster.</span></span><br><span class="line"><span class="comment"># b.    kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.</span></span><br><span class="line"><span class="comment"># c.    kubectl: the command line util to talk to your cluster.</span></span><br></pre></td></tr></table></figure><ol><li><em>配置阿里云的k8s源，加速安装</em></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ol start="2"><li><em>将 SELinux 设置为 permissive 模式（相当于将其禁用）</em></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><ol start="3"><li><em>安装</em></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y --nogpgcheck kubelet-1.25.2 kubeadm-1.25.2 kubectl-1.25.2  </span><br><span class="line"><span class="comment"># sudo yum install -y --nogpgcheck kubelet-1.26.3 kubeadm-1.26.3 kubectl-1.26.3 </span></span><br><span class="line"><span class="comment"># 自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><h4 id="228-启动控制面节点"><a class="markdownIt-Anchor" href="#228-启动控制面节点"></a> 2.2.8 启动控制面节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.25.2 --image-repository registry.aliyuncs.com/google_containers --pod-network-cidr=10.244.0.0/16 </span><br><span class="line"></span><br><span class="line"><span class="comment">#kubeadm init --kubernetes-version=v1.26.3 --image-repository registry.aliyuncs.com/google_containers --pod-network-cidr=10.244.0.0/16 </span></span><br></pre></td></tr></table></figure><p><font color='red'>若出现如下错误（上一次集群初始化的残留文件）</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果出现报错  </span></span><br><span class="line">[ERROR FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml]: /etc/kubernetes/manifests/kube-apiserver.yaml already exists</span><br></pre></td></tr></table></figure><p><font color='red'>执行如下命令后再次初始化</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/etcd</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/kubernetes/manifests/* </span><br></pre></td></tr></table></figure><h4 id="229-配置环境变量font-colorred初始化后font"><a class="markdownIt-Anchor" href="#229-配置环境变量font-colorred初始化后font"></a> 2.2.9 配置环境变量<font color='red'>(初始化后)</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h4 id="2210-将-master-作为node管理节点上执行"><a class="markdownIt-Anchor" href="#2210-将-master-作为node管理节点上执行"></a> 2.2.10 将 master 作为node（管理节点上执行）</h4><ul><li>检查 node 是否存在污点<ul><li>污点值有三种：<ul><li><font color='blue'>NoSchedule</font>：一定不被调度</li><li><font color='blue'>PreferNoSchedule</font>：尽量不被调度【也有被调度的几率】</li><li><font color='blue'>NoExecute</font>：不会调度，并且还会驱逐Node已有Pod</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe nodes gisweb4 |grep Taints</span><br></pre></td></tr></table></figure><ul><li>删除污点：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次删除的污点为：node-role.kubernetes.io/control-plane-</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/control-plane-</span><br></pre></td></tr></table></figure><h4 id="2211-安装-pod-网络插件cnicontainer-network-interfacefont-colorredmasterfont"><a class="markdownIt-Anchor" href="#2211-安装-pod-网络插件cnicontainer-network-interfacefont-colorredmasterfont"></a> 2.2.11 安装 Pod 网络插件（CNI：Container Network Interface）<font color='red'>(master)</font></h4><p>你必须部署一个基于 Pod 网络插件的 容器网络接口 (CNI)，以便你的 Pod 可以相互通信。</p><p><font color='red'>确保kubeadm初始化时，pod_cidr 为10.244.0.0</font></p><ul><li>下载 <strong>yml</strong> 配置文件<ul><li>或自己下载到本地</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml -O</span><br></pre></td></tr></table></figure><ul><li>编辑<strong>kube-flannel.yml</strong><ul><li>找到如下位置，添加 <strong>iface-regex</strong></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim kube-flannel.yml</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">- --iface-regex=^192.168..</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408114839608.png" alt="" /></p><ul><li>构建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><h4 id="2212-node-节点加入集群"><a class="markdownIt-Anchor" href="#2212-node-节点加入集群"></a> 2.2.12 node 节点加入集群</h4><ul><li>管理节点获取加入命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br><span class="line"><span class="comment"># 返回如下</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 125.220.153.23:6443 --token x0wdaj.d5wltdzdtos22fl6 --discovery-token-ca-cert-hash sha256:9245d363cdeb1757bacba21b9ccdc06a28e7490bcedfb0eeb404b56f769fa112</span><br></pre></td></tr></table></figure><ul><li>在 node 节点执行生成命令</li></ul><p>如果此步报如下错误</p><p><span style="color:red">The connection to the server localhost:8080 was refused - did you specify the right host</span></p><ol><li><span style="color:blue">出现这个问题的原因是kubectl命令需要使用<code>kubernetes-admin</code>的身份来运行，在<code>kubeadm int</code>启动集群的步骤中就生成了<code>/etc/kubernetes/admin.conf</code>。</span></li><li><span style="color:blue">因此，解决方法如下，将主节点中的<code>/etc/kubernetes/admin.conf</code>文件拷贝到工作节点相同目录下：</span></li><li><span style="color:blue">然后分别在工作节点上配置环境变量：</span></li></ol><p class='p red'>解决方案</p><ul><li>主节点执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将主节点中的【/etc/kubernetes/admin.conf】文件拷贝到工作节点相同目录下：</span></span><br><span class="line">scp -P22 /etc/kubernetes/admin.conf oge@125.220.153.22:/etc/kubernetes/</span><br></pre></td></tr></table></figure><ul><li><code>node</code> 节点执行如下命令后，再次执行加入集群的命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>如果是重新加入集群，需要 <code>reset</code> 一下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h4 id="2213-添加新的-master-节点"><a class="markdownIt-Anchor" href="#2213-添加新的-master-节点"></a> 2.2.13 添加新的 master 节点</h4><ul><li>管理节点：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理节点查看</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"><span class="comment"># 生成如下</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 125.220.153.23:6443 --token mc56rw.t9b3d1ql53yhom9y --discovery-token-ca-cert-hash sha256:753ccf865a9c590413043d469a9848300871afaef7221e3fdb97d981939a2b83</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理节点</span></span><br><span class="line">kubeadm init phase upload-certs --upload-certs </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">I0413 11:00:30.817038   10009 version.go:256] remote version is much newer: v1.27.0; falling back to: stable-1.25</span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> Secret <span class="string">&quot;kubeadm-certs&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">70d43cde7f6423b5c3e88c0fa9d08511cefbc53992dc63a13544cd548a912941</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理节点，在networking前添加：controlPlaneEndpoint: 125.220.153.23:6443</span></span><br><span class="line">kubectl -n kube-system edit cm kubeadm-config</span><br></pre></td></tr></table></figure><ul><li>新的master节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新节点</span></span><br><span class="line"><span class="comment"># 重新加入的话，检查是否需要kill掉6443端口（这是之前的api-service服务）</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 125.220.153.23:6443 --token mc56rw.t9b3d1ql53yhom9y --discovery-token-ca-cert-hash sha256:753ccf865a9c590413043d469a9848300871afaef7221e3fdb97d981939a2b83 --control-plane --certificate-key 70d43cde7f6423b5c3e88c0fa9d08511cefbc53992dc63a13544cd548a912941</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">This node has joined the cluster and a new control plane instance was created:</span><br><span class="line"></span><br><span class="line">* Certificate signing request was sent to apiserver and approval was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line">* Control plane label and taint were applied to the new node.</span><br><span class="line">* The Kubernetes control plane instances scaled up.</span><br><span class="line">* A new etcd member was added to the <span class="built_in">local</span>/stacked etcd cluster.</span><br><span class="line"></span><br><span class="line">To start administering your cluster from this node, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">        sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">        sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> to see this node <span class="built_in">join</span> the cluster.</span><br></pre></td></tr></table></figure><h2 id="3-k8s-管理平台-dashboard-环境部署font-colorred管理节点font"><a class="markdownIt-Anchor" href="#3-k8s-管理平台-dashboard-环境部署font-colorred管理节点font"></a> 3 K8S 管理平台 dashboard 环境部署<font color='red'>（管理节点）</font></h2><ul><li>下载 <strong>yaml</strong> 配置文件并应用<ul><li>或下载到本地然后上传</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><ul><li>修改配置文件(以node)<ul><li>但是这个只能内部访问，所以要外部访问，要么部署 ingress，要么就是设置 service NodePort 类型。这里选择 service 暴露端口。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其中的，type: ClusterIP 修改成type: NodePort，保存退出即可。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务的暴露端口，需在安全组放行</span></span><br><span class="line">kubectl get svc -A |grep kubernetes-dashboard</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415154841715.png" alt="image-20230415154841715" /></p><ul><li>权限认证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建访问用户</span></span><br><span class="line">kubectl apply -f https://kuboard.cn/install-script/k8s-dashboard/auth.yaml</span><br><span class="line"><span class="comment"># 获取访问令牌</span></span><br><span class="line">kubectl -n kubernetes-dashboard create token admin-user </span><br><span class="line"><span class="comment"># 生成的令牌</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IkdVQTZzb3JEM1FHdkpxVDNsSEwtVEZWc2hyR08tbmFFWnFGX2Q2OGt5cEkifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjgzNzM1MTQ1LCJpYXQiOjE2ODM3MzE1NDUsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiMzBlMWQzNDEtNDc0Yi00M2MyLWIyNzYtZGIxZTU4NzM5ZTgxIn19LCJuYmYiOjE2ODM3MzE1NDUsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.mg1IU29tBpH23nglJVbRmVa2A26WZjXxMCzckQyb-dnviLBRzBuvNebb8H4YH5CNJUPkB2GGC_r7dlm5zEbPpK8RqkbwXy-wqkOoMephs83gIQkJ3RgskpWqTgqqg87e6WXHRtuzYsQQZ4Rq3Y4uQy9jJS9o1lIoRTujpmpWORb9vu4JN0RqEfK2chQqNsYCe_TCtvtvkP2EyuU3QSeYdvWh5NNZ9CYwA8l8eqA6ijrmTqZjnI6Q9Ymo7trKSuGFmffotBpN9dTYZoyv6Io_VgEz6_1oHsA0pwG-3wc41Ly11sDAzwjZvoGN1yfw0vsVcwnAjH4LkRG2ImwYIcZbig</span><br></pre></td></tr></table></figure><ul><li>访问方式（每个节点 ip 均可访问）：<a href="https://125.220.153.23:30151">https://125.220.153.23:30151</a></li></ul><h2 id="4-安装k8s的包管理工具helm-font-colorred管理节点font"><a class="markdownIt-Anchor" href="#4-安装k8s的包管理工具helm-font-colorred管理节点font"></a> 4 安装K8S的包管理工具Helm <font color='red'>（管理节点）</font></h2><p><span style="color:red">参考</span>：<a href="https://helm.sh/docs/intro/install/">https://helm.sh/docs/intro/install/</a></p><ul><li>这里以下载压缩包安装为例：</li></ul><p><span style="color:red">参考</span>：<a href="https://www.cnblogs.com/zhanglianghhh/p/14165995.html">https://www.cnblogs.com/zhanglianghhh/p/14165995.html</a><br /><span style="color:red">github地址</span>：<a href="https://github.com/helm/helm">https://github.com/helm/helm</a></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230413112634363.png" alt="image-20230413112634363" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  ~/k8s/helm</span><br><span class="line">wget https://get.helm.sh/helm-v3.11.3-linux-amd64.tar.gz</span><br><span class="line">tar zxfv helm-v3.11.3-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> ./linux-amd64/helm /usr/bin/</span><br><span class="line"><span class="comment"># 显示版本，安装完成</span></span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h2 id="5-安装k8s的包管理工具-krew管理节点"><a class="markdownIt-Anchor" href="#5-安装k8s的包管理工具-krew管理节点"></a> 5 安装K8S的包管理工具 krew<code>（管理节点）</code></h2><p><span style="color:red">参考</span>：<a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/">https://krew.sigs.k8s.io/docs/user-guide/setup/install/</a></p><ul><li>确保 git 已经安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br><span class="line"><span class="comment"># 若未安装</span></span><br><span class="line">yum -y install git</span><br></pre></td></tr></table></figure><ul><li>安装krew</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="built_in">set</span> -x; <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(mktemp -d)</span>&quot;</span> &amp;&amp;</span><br><span class="line">  OS=<span class="string">&quot;<span class="subst">$(uname | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;)</span>&quot;</span> &amp;&amp;</span><br><span class="line">  ARCH=<span class="string">&quot;<span class="subst">$(uname -m | sed -e &#x27;s/x86_64/amd64/&#x27; -e &#x27;s/\(arm\)\(64\)\?.*/\1\2/&#x27; -e &#x27;s/aarch64$/arm64/&#x27;)</span>&quot;</span> &amp;&amp;</span><br><span class="line">  KREW=<span class="string">&quot;krew-<span class="variable">$&#123;OS&#125;</span>_<span class="variable">$&#123;ARCH&#125;</span>&quot;</span> &amp;&amp;</span><br><span class="line">  curl -fsSLO <span class="string">&quot;https://github.com/kubernetes-sigs/krew/releases/latest/download/<span class="variable">$&#123;KREW&#125;</span>.tar.gz&quot;</span> &amp;&amp;</span><br><span class="line">  tar zxvf <span class="string">&quot;<span class="variable">$&#123;KREW&#125;</span>.tar.gz&quot;</span> &amp;&amp;</span><br><span class="line">  ./<span class="string">&quot;<span class="variable">$&#123;KREW&#125;</span>&quot;</span> install krew</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>添加 <code>$HOME/.krew/bin</code>目录到您的 PATH 环境变量。  更新你的 <code>.bashrc</code>或者 <code>.zshrc</code>文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久写的用户的环境变量文件，避免登出后失效</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$&#123;KREW_ROOT:-<span class="variable">$HOME</span>/.krew&#125;</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>若安装失败，采用压缩包安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/kubernetes-sigs/krew/releases/latest/download/krew-linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf krew-linux_amd64.tar.gz</span><br><span class="line"><span class="comment"># 添加$HOME/.krew/bin目录到PATH环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$&#123;KREW_ROOT:-<span class="variable">$HOME</span>/.krew&#125;</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="comment"># 配置为 kubectl 插件</span></span><br><span class="line"><span class="built_in">mv</span> ./krew-linux_amd64 ./kubectl-krew</span><br><span class="line"><span class="built_in">mv</span> ./kubectl-krew /usr/local/bin/</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">kubectl krew version</span><br></pre></td></tr></table></figure><ul><li>检查是否安装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl krew</span><br><span class="line">kubectl plugin list</span><br></pre></td></tr></table></figure><h2 id="6-为-k8s-创建-pv-持久卷"><a class="markdownIt-Anchor" href="#6-为-k8s-创建-pv-持久卷"></a> 6 为 K8S 创建 PV 持久卷</h2><h3 id="61-pv和pvc"><a class="markdownIt-Anchor" href="#61-pv和pvc"></a> 6.1 PV和PVC</h3><ul><li><p><font color='red'>持久卷(PersistentVolume，PV)</font>是集群中由管理员配置的一段网络存储。它是集群中的资源，就像节点是集群资源一样。PV持久卷和普通的Volume一样，也是使用卷插件来实现的，只是它们拥有独立于任何使用PV的Pod的生命周期。此API对象捕获存储实现的详细信息，包括NFS，iSCSI或特定于云提供程序的存储系统。</p></li><li><p><font color='red'>持久卷申领(PersistentVolumeClaim，PVC)</font>表达的是用户对存储的请求。概念上与Pod类似。Pod会耗用节点资源，而PVC申领会耗用PV资源。</p></li></ul><h3 id="62-用-storageclass-动态创建-pv"><a class="markdownIt-Anchor" href="#62-用-storageclass-动态创建-pv"></a> 6.2 用 storageClass 动态创建 PV</h3><ul><li><font color='green'>对1PB的大量目录创建NFS服务，gisweb1-4，以gisweb4为例子</font></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装NFS: </span><br><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><ul><li><font color='green'>设置持久卷权限</font></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行权限</span></span><br><span class="line"><span class="built_in">chown</span> -R nobody:nfsnobody /mnt/storage/k8s/pv</span><br><span class="line"><span class="comment">#chmod -R 777 /mnt/storage/k8s/pv</span></span><br></pre></td></tr></table></figure><ul><li>配置 nfs</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/exports</span><br><span class="line"><span class="comment"># 添加：</span></span><br><span class="line">/mnt/storage/k8s/pv 192.168.0.0/24(rw,<span class="built_in">sync</span>,no_root_squash)</span><br><span class="line"><span class="comment"># 以上设置让所有的 IP 都有效</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs</span><br><span class="line">systemctl start nfs</span><br><span class="line">systemctl start nfs-server</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server</span><br><span class="line"></span><br><span class="line">systemctl start firewalld</span><br><span class="line">firewall-cmd --permanent --add-service=nfs</span><br><span class="line">firewall-cmd  --reload</span><br><span class="line">systemctl stop firewalld &amp;&amp; sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><ul><li>检查</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exportfs -rv</span><br><span class="line">showmount -e 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li><font color='red'>所有节点安装nfs客户端</font></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br><span class="line"><span class="comment"># 每个节点挂载nfs客户端的存储目录，本次nfs客户端在gisweb4（192.168.0.204）上</span></span><br><span class="line">mount -t nfs 192.168.0.204:/mnt/storage/k8s/pv /mnt/storage/k8s/pv </span><br><span class="line"><span class="comment"># 检查挂载情况</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><ul><li>安装nfs-client-provisioner (需要翻墙)</li></ul><p>参考：<a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner"><strong>https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新helm repo</span></span><br><span class="line">helm repo update</span><br><span class="line"><span class="comment"># 搜索helm库中nfs版本</span></span><br><span class="line">helm search repo nfs-subdir-external-provisioner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 helm 仓库</span></span><br><span class="line">helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/</span><br><span class="line"></span><br><span class="line">helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \</span><br><span class="line">--<span class="built_in">set</span> nfs.server=192.168.0.204 \</span><br><span class="line">--<span class="built_in">set</span> nfs.path=/mnt/storage/k8s/pv     \</span><br><span class="line">--<span class="built_in">set</span> image.repository=registry.cn-hangzhou.aliyuncs.com/xzjs/nfs-subdir-external-provisioner \</span><br><span class="line">--<span class="built_in">set</span> image.tag=v4.0.0</span><br></pre></td></tr></table></figure><ul><li><font color='red'>手动安装 nfs-client-provisioner</font></li></ul><p>参考：<a href="http://www.mydlq.club/article/109/#%E5%88%9B%E5%BB%BA-nfs-subdir-external-provisioner-%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6">http://www.mydlq.club/article/109/#创建-nfs-subdir-external-provisioner-部署文件</a></p><ul><li>成功后，安装时添加持久化参数，其中 nfs-storage 为安装的 storageclass 的 provisioner 字段名字</li></ul><h2 id="7-安装-kubeapps-可视化软件管理工具"><a class="markdownIt-Anchor" href="#7-安装-kubeapps-可视化软件管理工具"></a> 7 安装 kubeAPPS 可视化软件管理工具</h2><p>参考：<a href="https://kubeapps.dev/docs/latest/tutorials/getting-started/"><strong>https://kubeapps.dev/docs/latest/tutorials/getting-started/</strong></a></p><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 kubeapps 仓库</span></span><br><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"><span class="comment"># 创建 kubeapps 的命名空间</span></span><br><span class="line">kubectl create namespace kubeapps</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">helm install kubeapps --namespace kubeapps bitnami/kubeapps</span><br></pre></td></tr></table></figure><ul><li>创建证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用于访问 Kubeapps 和 Kubernetes 的演示凭证</span></span><br><span class="line">kubectl create --namespace default serviceaccount kubeapps-operator</span><br><span class="line">kubectl create clusterrolebinding kubeapps-operator --clusterrole=cluster-admin --serviceaccount=default:kubeapps-operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Secret</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: kubeapps-operator-token</span></span><br><span class="line"><span class="string">  namespace: default</span></span><br><span class="line"><span class="string">  annotations:</span></span><br><span class="line"><span class="string">    kubernetes.io/service-account.name: kubeapps-operator</span></span><br><span class="line"><span class="string">type: kubernetes.io/service-account-token</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>查看令牌 token</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get --namespace default secret kubeapps-operator-token -o go-template=<span class="string">&#x27;&#123;&#123;.data.token | base64decode&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IkdVQTZzb3JEM1FHdkpxVDNsSEwtVEZWc2hyR08tbmFFWnFGX2Q2OGt5cEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1YmVhcHBzLW9wZXJhdG9yLXRva2VuIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Imt1YmVhcHBzLW9wZXJhdG9yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNTNjY2M0N2YtZWFmMS00NDY4LWJkN2ItYTVhMzliMzJjMzExIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6a3ViZWFwcHMtb3BlcmF0b3IifQ.qsTBQODZLD1EUP5WjF_ju0-_ZFoJa2pEGCGf2zoLK71TjZeytD0GUGp4Z5ACNFuJMtedtx8tRgWhioU2oimxGdCIL4f7Szt0dOQgXD15HmoiUjYEcDQNsfTdcmfZw-m3-zwtTqa3kTTG3Wio0wf_f_ayw8qZCDL2i3PK-7h0QeAb1rQhtCz_e8huNrcshjixGlyw8aKUvdi2hPe6yvpxKJqQeOalNhT22b-ax28oIyqmC-NXYUMyRbEsgOjyuJAv6XdjqsQKbOGMKsTtNyf7CvnHl88hfRZpF0W-GuKj1ggKGYClTHuXnsv9QP-AQN1UaEtcAbUp08bHN9isedJL6w</span><br></pre></td></tr></table></figure><ul><li>修改服务模式，将其改为 NodePort</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为是测试环境，因此直接采用 NodePort 方式暴露服务端口</span></span><br><span class="line">kubectl edit svc kubeapps -n kubeapps</span><br></pre></td></tr></table></figure><ul><li>找到端口，在安全组放行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -A |grep kubeapps</span><br></pre></td></tr></table></figure><ul><li><font color='red'>访问</font>：<a href="http://125.220.153.23:31885/">http://125.220.153.23:31885/</a></li></ul><h2 id="8-在-k8s-上部署虚拟机服务-kubevirt"><a class="markdownIt-Anchor" href="#8-在-k8s-上部署虚拟机服务-kubevirt"></a> 8 在 K8S 上部署虚拟机服务 Kubevirt</h2><ul><li>设置 <strong>K8S</strong> <strong>ApiServer</strong> 允许特权容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line"><span class="comment"># 设置 </span></span><br><span class="line">--allow-privileged=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>检查每个节点是否支持虚拟化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virt-host-validate qemu</span><br><span class="line"><span class="comment"># 如果显示没有这个命令，先安装 libvrt 和 qemu 软件包：</span></span><br><span class="line">yum install -y qemu-kvm libvirt virt-install bridge-utils</span><br></pre></td></tr></table></figure><ul><li>若有<strong>warnning</strong>，需要解决</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408181653957.png" alt="image-20230408181653957" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">vim /etc/default/grub</span><br><span class="line"><span class="comment"># 2.添加</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet intel_iommu=on&quot;</span></span><br><span class="line"><span class="comment"># 3 </span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="comment"># 4 </span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><ul><li>安装 <strong>Kubevirt</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># K8S 1.25版本，Kubervirt必须0.57.2以上，才能适配</span></span><br><span class="line">kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/v0.58.0-rc.0/kubevirt-operator.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/v0.58.0-rc.0/kubevirt-cr.yaml</span><br></pre></td></tr></table></figure><ul><li>等待 <strong>Kubevirt</strong> 资源创建完毕</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubevirt <span class="built_in">wait</span> kv kubevirt --<span class="keyword">for</span> condition=Available</span><br></pre></td></tr></table></figure><ul><li>安装 <strong>CDI</strong></li></ul><p><span style="color:red">参考</span>：<a href="https://kubevirt.io/labs/kubernetes/lab2.html">https://kubevirt.io/labs/kubernetes/lab2.html</a></p><ul><li>安装 <strong>VNC</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tigervnc</span><br></pre></td></tr></table></figure><ul><li>查看 <strong>Kubevirt</strong> 资源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kubevirt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408185646502.png" alt="image-20230408185646502" /></p><ul><li>安装 <strong>Kubevirt</strong> 的 <strong>cli</strong> 管理工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl krew install virt</span><br><span class="line">kubectl virt <span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>Kubevirt创建/删除虚拟机服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.    创建yaml文件</span></span><br><span class="line">Xxx</span><br><span class="line"><span class="comment"># 2.    运行一个虚拟机</span></span><br><span class="line">kubectl apply -f test.yaml</span><br><span class="line"><span class="comment"># 3.    查看虚拟机</span></span><br><span class="line">kubectl get vmis</span><br><span class="line"><span class="comment"># 4.    停止/删除虚拟机</span></span><br><span class="line">kubectl delete -f vmi.yaml</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">kubectl delete vmis testvmi</span><br><span class="line"><span class="comment"># 5.    开始/停止/暂停虚拟机</span></span><br><span class="line">virtctl start/stop/pause my-vm</span><br></pre></td></tr></table></figure><h2 id="9-在-k8s-上部署-postgresql"><a class="markdownIt-Anchor" href="#9-在-k8s-上部署-postgresql"></a> 9 在 K8S 上部署 PostgreSQL</h2><ul><li><p>安装</p><ul><li><p>注意：数据库安装需要持久卷，需提前创建满足要求的<strong>pv</strong>，或者创建<strong>nas</strong>的<strong>stroageclass</strong>，以自动根据<strong>mysql</strong>的<strong>pvc</strong>创建<strong>pv</strong>。</p></li><li><p>集群已经配置23服务器的<code>/mnt/storage/k8s/pv</code>为NAS,并已经配置名字为<strong>nas-storage</strong>的<strong>sc</strong></p></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"><span class="comment"># 首先检查是否有oge这个命名空间，否则执行如下进行创建</span></span><br><span class="line">kubectl create ns oge</span><br><span class="line"><span class="comment"># postgresql 这个名字可以自己定义，但后面每一步都要注意对应更改</span></span><br><span class="line">helm install -n oge  bitnami/postgresql \</span><br><span class="line">--<span class="built_in">set</span> global.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.size=200Gi \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.size=200Gi \</span><br><span class="line">--<span class="built_in">set</span> image.tag=14.5.0-debian-11-r6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm install -n geoctap  bitnami/postgresql \</span><br><span class="line">--<span class="built_in">set</span> global.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.size=200Gi \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.size=200Gi \</span><br><span class="line">--<span class="built_in">set</span> image.tag=14.5.0-debian-11-r6</span><br><span class="line"><span class="comment"># 指定版本，可在kubeapps里面查看</span></span><br><span class="line"><span class="comment"># --set image.tag=14.5.0-debian-11-r6</span></span><br></pre></td></tr></table></figure><ul><li>查看 postgresql 密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --namespace oge postgresql -o jsonpath=<span class="string">&quot;&#123;.data.postgres-password&#125;&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">7jXf2gsmUX</span><br></pre></td></tr></table></figure><ul><li>更改服务端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit svc --namespace oge postgresql</span><br><span class="line"><span class="comment"># 将 type=ClusterIP 改为 NodePort</span></span><br><span class="line"><span class="comment"># b8:85:84:71:64:28</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUBSYSTEM==\&quot;net\&quot;, ACTION==\&quot;add\&quot;, DRIVERS==\&quot;?*\&quot;, ATTR&#123;address&#125;==\&quot; b8:85:84:71:64:28\&quot;, ATTR&#123;type&#125;==\&quot;1\&quot;, KERNEL==\&quot;eno*\&quot;, NAME=\&quot;eno1\&quot;&quot;</span> &gt;&gt; /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure><ul><li>缩放副本集</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment </span><br><span class="line"><span class="comment"># 发现并没有postgresql</span></span><br><span class="line">kubectl get all -n oge</span><br><span class="line"><span class="comment"># 发现有statefulset.apps/postgresql</span></span><br><span class="line"><span class="comment"># 设置副本集个数为1</span></span><br><span class="line">kubectl scale --replicas=1 statefulset.apps/postgresql -n oge</span><br></pre></td></tr></table></figure><ul><li>命令行进入pgsql</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入pgsql的pod</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it -n oge postgresql-0 bash </span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line">psql -U postgres </span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line">7jXf2gsmUX</span><br></pre></td></tr></table></figure><ul><li>在pod外面执行sql</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h 125.220.153.23 -p 30865 -U postgres -W -f ./public.sql</span><br></pre></td></tr></table></figure><h2 id="10-在-k8s-上部署-mysql"><a class="markdownIt-Anchor" href="#10-在-k8s-上部署-mysql"></a> 10 在 K8S 上部署 MySQL</h2><ul><li><p>安装</p><ul><li><p>注意：数据库安装需要持久卷，需提前创建满足要求的<code>pv</code>，或者创建<code>nas</code>的 <code>stroageclass</code>，以自动根据postgresql的pvc创建pv。</p></li><li><p>集群已经配置23服务器的<code>/mnt/storage/k8s/pv</code>为 <code>NAS</code>,并已经配置名字为 <code>nas-storage</code> 的 <code>sc</code></p></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">helm install -n oge mysql bitnami/mysql \</span><br><span class="line">--<span class="built_in">set</span> global.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.size=200Gi \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.size=200Gi</span><br></pre></td></tr></table></figure><ul><li>查看 MySQL 密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --namespace oge mysql -o jsonpath=<span class="string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">VubCMiHvT1</span><br></pre></td></tr></table></figure><ul><li>更改服务端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit svc --namespace oge mysql</span><br><span class="line"><span class="comment"># 将type=ClusterIP改为NodePort</span></span><br><span class="line"><span class="comment"># b8:85:84:71:64:28</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUBSYSTEM==\&quot;net\&quot;, ACTION==\&quot;add\&quot;, DRIVERS==\&quot;?*\&quot;, ATTR&#123;address&#125;==\&quot; b8:85:84:71:64:28\&quot;, ATTR&#123;type&#125;==\&quot;1\&quot;, KERNEL==\&quot;eno*\&quot;, NAME=\&quot;eno1\&quot;&quot;</span> &gt;&gt; /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure><ol start="2"><li>缩放副本集</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment </span><br><span class="line"><span class="comment"># 发现并没有mysql</span></span><br><span class="line">kubectl get all -n oge</span><br><span class="line"><span class="comment"># 发现有statefulset.apps/mysql</span></span><br><span class="line">kubectl scale --replicas=1 statefulset.apps/mysql -n oge</span><br></pre></td></tr></table></figure><ol start="3"><li>在K8S中进入数据库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it -n oge mysql-1  bash</span><br><span class="line"><span class="comment"># 进入后登录用户</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 输入密码</span></span><br></pre></td></tr></table></figure><h2 id="11-在k8s上部署-mongodb"><a class="markdownIt-Anchor" href="#11-在k8s上部署-mongodb"></a> 11 在K8S上部署 MongoDB</h2><ul><li><p>安装</p><ul><li><p>注意：数据库安装需要持久卷，需提前创建满足要求的pv，或者创建nas的stroageclass，以自动根据postgresql的pvc创建pv。</p></li><li><p>集群已经配置23服务器的<code>/mnt/storage/k8s/pv</code>为NAS,并已经配置名字为nas-storage的sc</p></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">helm install -n ydy mongodb bitnami/mongodb \</span><br><span class="line">--<span class="built_in">set</span> global.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.storageClass=nfs-client \</span><br><span class="line">--<span class="built_in">set</span> primary.persistence.size=100Gi \</span><br><span class="line">--<span class="built_in">set</span> readReplicas.persistence.size=100Gi</span><br></pre></td></tr></table></figure><ul><li>查看 MongoDB 密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --namespace ydy mongodb -o jsonpath=<span class="string">&quot;&#123;.data.mongodb-root-password&#125;&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">WUL9FPQ2V9</span><br></pre></td></tr></table></figure><ul><li>更改服务端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit svc --namespace ydy mongodb</span><br><span class="line"><span class="comment"># 将type=ClusterIP改为NodePort</span></span><br><span class="line"><span class="comment"># b8:85:84:71:64:28</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUBSYSTEM==\&quot;net\&quot;, ACTION==\&quot;add\&quot;, DRIVERS==\&quot;?*\&quot;, ATTR&#123;address&#125;==\&quot; b8:85:84:71:64:28\&quot;, ATTR&#123;type&#125;==\&quot;1\&quot;, KERNEL==\&quot;eno*\&quot;, NAME=\&quot;eno1\&quot;&quot;</span> &gt;&gt; /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure><ol start="2"><li>缩放副本集</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment </span><br><span class="line"><span class="comment"># 发现并没有mongodb</span></span><br><span class="line">kubectl get all -n ydy</span><br><span class="line"><span class="comment"># 发现有statefulset.apps/mongodb</span></span><br><span class="line">kubectl scale --replicas=1 statefulset.apps/mongodb -n ydy</span><br></pre></td></tr></table></figure><ol start="3"><li>在K8S中进入数据库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it -n ydy mongodb-644c657c4f-x62cn bash</span><br></pre></td></tr></table></figure><h2 id="12-在-k8s-上部署-apache-spark"><a class="markdownIt-Anchor" href="#12-在-k8s-上部署-apache-spark"></a> 12 在 K8S 上部署 Apache Spark</h2><p>两个方式，第一种方式为Spark官方提出的；第二种为Google提出的，更符合K8S原生概念</p><ol><li>Spark On K8S</li><li>spark-on-k8s-operator</li></ol><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408170401365.png" alt="image-20230408170401365" /></p><center>Spark On K8S</center><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408170444023.png" alt="image-20230408170444023" /></p><center>spark-on-k8s-operator</center><h3 id="121-font-colorblack安装-spark-on-k8s-operator-font"><a class="markdownIt-Anchor" href="#121-font-colorblack安装-spark-on-k8s-operator-font"></a> 12.1 <font color='black'>安装 spark-on-k8s-operator </font></h3><p><span style="color:red">参考 </span>：<a href="https://blog.csdn.net/w8998036/article/details/122217230">https://blog.csdn.net/w8998036/article/details/122217230</a></p><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">helm repo add spark-operator https://googlecloudplatform.github.io/spark-on-k8s-operator </span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意是否存在 spark-operator 命名空间，没有则创建</span></span><br><span class="line">kubectl create ns spark-operator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">helm install spark-operator spark-operator/spark-operator --namespace spark-operator  --<span class="built_in">set</span> sparkJobNamespace=default  --<span class="built_in">set</span> webhook.enable=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>创建服务账户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim spark-application-rbac.yaml</span><br><span class="line"><span class="comment"># 内容如下</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">spark</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;*&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;*&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">spark</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">spark</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --user=root</span><br></pre></td></tr></table></figure><ul><li>编写作业模板并提交作业</li></ul><p><em>创建一个Spark作业的YAML配置文件，并进行部署。</em></p><ol><li>创建spark-pi.yaml文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">&quot;sparkoperator.k8s.io/v1beta2&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SparkApplication</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-pi</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">spark</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Scala</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">cluster</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/yudayu/spark:v3.1.1&quot;</span>  </span><br><span class="line">  <span class="comment"># 1gcr.io/spark-operator/spark:v3.1.1需要更换镜像，gcr.io目前国内无法访问。可以先对docker挂代理，pull到阿里云镜像后</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">mainClass:</span> <span class="string">org.apache.spark.examples.SparkPi</span></span><br><span class="line">  <span class="attr">mainApplicationFile:</span> <span class="string">&quot;local:///opt/spark/examples/jars/spark-examples_2.12-3.1.1.jar&quot;</span>    </span><br><span class="line">  <span class="comment"># 需要更换自己的jar包，local指该jar位于image内，可换成所有节点都能访问的web路径，或者通过指定nas挂载pv，将jar包放在nas的pv里</span></span><br><span class="line">  <span class="attr">sparkVersion:</span> <span class="string">&quot;3.1.1&quot;</span></span><br><span class="line">  <span class="attr">restartPolicy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;test-volume&quot;</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">Directory</span></span><br><span class="line">  <span class="attr">driver:</span></span><br><span class="line">    <span class="attr">cores:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">coreLimit:</span> <span class="string">&quot;1200m&quot;</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">&quot;512m&quot;</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">3.1</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">serviceAccount:</span> <span class="string">spark</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;test-volume&quot;</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">  <span class="attr">executor:</span></span><br><span class="line">    <span class="attr">cores:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">instances:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">&quot;512m&quot;</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">3.1</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;test-volume&quot;</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">&quot;/tmp&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>部署一个Spark计算任务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f spark-pi.yaml</span><br></pre></td></tr></table></figure><p>运维</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get sparkapplications</span><br><span class="line">kubectl describe sparkapplications</span><br><span class="line">kubectl get svc  <span class="comment"># 查看该任务的spark ui</span></span><br></pre></td></tr></table></figure><h3 id="122-font-colorblack安装-spark-on-k8sfont"><a class="markdownIt-Anchor" href="#122-font-colorblack安装-spark-on-k8sfont"></a> 12.2 <font color='black'>安装  Spark On K8S</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"><span class="comment"># 注意是否存在 spark-operator 命名空间，没有则创建</span></span><br><span class="line">kubectl create ns spark-on-k8s</span><br><span class="line">helm install -n spark-on-k8s spark bitnami/spark \</span><br><span class="line">  --<span class="built_in">set</span> worker.coreLimit=28 </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit    \</span><br><span class="line">    --class org.apache.spark.examples.SparkPi \</span><br><span class="line">    --conf spark.kubernetes.container.image=bitnami/spark:3 \</span><br><span class="line">    --master k8s://https://125.220.153.23:6443 \</span><br><span class="line">    --conf spark.kubernetes.driverEnv.SPARK_MASTER_URL=spark://10.97.43.141:7077  \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --num-executors 10 \</span><br><span class="line">--conf spark.executor.instances=5 \</span><br><span class="line">https:///data/spark-examples_2.12-3.3.0.jar 1000</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --namespace spark-on-k8s spark-oge --<span class="built_in">rm</span> --<span class="built_in">tty</span> -i --restart=<span class="string">&#x27;Never&#x27;</span> \</span><br><span class="line">--image bitnami/spark:3 \</span><br><span class="line">-- spark-submit --master spark://10.97.43.141:7077 \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">    --deploy-mode cluster \</span><br><span class="line">/data/spark-examples_2.12-3.3.0.jar 100000</span><br></pre></td></tr></table></figure><h2 id="13-在k8s上部署redis集群"><a class="markdownIt-Anchor" href="#13-在k8s上部署redis集群"></a> 13 在K8S上部署redis集群</h2><ul><li>待更</li></ul><h2 id="14-在k8s上部署nginx"><a class="markdownIt-Anchor" href="#14-在k8s上部署nginx"></a> 14 在K8S上部署nginx</h2><h3 id="141-创建pv"><a class="markdownIt-Anchor" href="#141-创建pv"></a> 14.1 创建pv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx-pv.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ydy-pv</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ydy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/mnt/storage/k8s/pv/ydy-nginx-pvc</span></span><br></pre></td></tr></table></figure><h3 id="142-创建pvc"><a class="markdownIt-Anchor" href="#142-创建pvc"></a> 14.2 创建pvc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx-pvc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ydy-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ydy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><h3 id="143-安装nginx并设置静态资源挂载的pvc"><a class="markdownIt-Anchor" href="#143-安装nginx并设置静态资源挂载的pvc"></a> 14.3 安装nginx并设置静态资源挂载的pvc</h3><p>将nginx中的<code>/app</code>挂载到<code>/mnt/storage/k8s/pv/luluancheng-nginx-pvc</code>下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm install -n ydy nginx bitnami/nginx \</span><br><span class="line">--<span class="built_in">set</span> staticSitePVC=nginx-ydy-pvc</span><br></pre></td></tr></table></figure><h2 id="附录疑难问题解决"><a class="markdownIt-Anchor" href="#附录疑难问题解决"></a> 附录：疑难问题解决：</h2><h3 id="1-k8s强制删除-namespace会删除该命名空间中的所有-pod"><a class="markdownIt-Anchor" href="#1-k8s强制删除-namespace会删除该命名空间中的所有-pod"></a> 1 K8S强制删除 namespace（会删除该命名空间中的所有 pod ）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、将该分区导出为json文件，以 oge namespace为例</span></span><br><span class="line">kubectl get ns oge -o json &gt; oge.json</span><br><span class="line"><span class="comment">#2、编辑该json文件，将spec内的内容全部删除，然后保存退出</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/22f0a5cbf0424425b0d62681f79cb713.png" alt="22f0a5cbf0424425b0d62681f79cb713" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/ef949b8bb503410c918894ab20bad993.png" alt="ef949b8bb503410c918894ab20bad993" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、另开一个终端，启动一个proxy</span></span><br><span class="line">kubectl proxy --port=8081</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、执行一个curl命令，更新oge namespace</span></span><br><span class="line">curl -k -H <span class="string">&quot;Content-Type: application/json&quot;</span> -X PUT --data-binary @oge.json http://127.0.0.1:8081/api/v1/namespaces/oge/finalize</span><br></pre></td></tr></table></figure><h3 id="2-cni网络错误"><a class="markdownIt-Anchor" href="#2-cni网络错误"></a> 2 CNI网络错误</h3><ul><li>当迁移集群之后，拉取镜像报cni网络错误，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/8d5d49703c8ac59f24fde81b3982b616.png" alt="8d5d49703c8ac59f24fde81b3982b616" /></p><ul><li>从上面的截图中看到问题出现在给Pod分配IP上，意思是 cni0 的IP不同于``10.244.9.1/24<code>，下面我们使用  </code>ifconfig`命令查看IP信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/79e65e4f797200ad98feac6f8b2d4254.png" alt="79e65e4f797200ad98feac6f8b2d4254" /></p><ul><li>从上面的图中我们可以看到``flannel.1<code>的 **IP** 为</code>10.244.9.0<code>，然后我们又使用</code>cat /run/flannel/subnet.env`，该文件内容如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/310efbdb614636a17aa48eaf4a8dc2c5.png" alt="310efbdb614636a17aa48eaf4a8dc2c5" /></p><ul><li><p>其实现在的问题就比较明确了，我们使用的Overlay network为Flannel，也就是说Pod的IP地址段应该在Flannel的subnet下，而现在我们看到cni0的IP地址段与flannel subnet地址段不同，所以就出现了问题。</p></li><li><p>解决方案</p><ul><li>方法1是将 cni0 的 IP 段修改为``10.244.9.1`</li><li>方法2是将这个错误的网卡删除掉，之后会自动重建</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面我们删除错误的cni0，然后让它自己重建</span></span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ip <span class="built_in">link</span> delete cni0</span><br></pre></td></tr></table></figure><h3 id="3-28-服务器增加路由为了让两台刀片上网"><a class="markdownIt-Anchor" href="#3-28-服务器增加路由为了让两台刀片上网"></a> 3 28 服务器增加路由（为了让两台刀片上网）</h3><ul><li>28上执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.209/24 -o em1_2 -j MASQUERADE</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.177/24 -o em1_2 -j MASQUERADE</span><br></pre></td></tr></table></figure><h3 id="4-异常断电等导致-etcd-心跳检测出现问题"><a class="markdownIt-Anchor" href="#4-异常断电等导致-etcd-心跳检测出现问题"></a> 4 异常断电等导致 etcd 心跳检测出现问题</h3><ul><li><p><a href="https://github.com/kubernetes/kubernetes/issues/107491">Kubernetes API Server cannot be started after improper reboot</a></p></li><li><p><a href="https://blog.51cto.com/liruilong/6060676">K8S: etcd 集群备份灾难恢复操作手册</a></p></li></ul><h3 id="5-openstack服务器网络跳转镜像"><a class="markdownIt-Anchor" href="#5-openstack服务器网络跳转镜像"></a> 5 OpenStack服务器网络跳转镜像</h3><blockquote><p>作用: 保证OpenStack上服务器与实验室服务器可以 ping 通</p></blockquote><ul><li><strong>IP</strong><ul><li><code>115.156.91.250</code></li></ul></li><li><strong>网关</strong><ul><li><code>115.156.91.254</code></li></ul></li><li><strong>子网掩码</strong><ul><li><code>255.255.255.0</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
            <tag> Containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装CentOS 7</title>
      <link href="/posts/7ddf46fc/"/>
      <url>/posts/7ddf46fc/</url>
      
        <content type="html"><![CDATA[<h3 id="0-准备工作"><a class="markdownIt-Anchor" href="#0-准备工作"></a> 0 准备工作</h3><ul><li>CentOS 操作系统镜像文件下载：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.aliyun.com">https://mirrors.aliyun.com</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908171707525.png" alt="image-20230908171707525" /></p><hr /><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908171728656.png" alt="image-20230908171728656" /></p><hr /><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908171742599.png" alt="image-20230908171742599" /></p><hr /><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908175418265.png" alt="image-20230908175418265" /></p><hr /><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908175442769.png" alt="image-20230908175442769" /></p><hr /><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908175605742.png" alt="image-20230908175605742" /></p><h3 id="1-新建虚拟机"><a class="markdownIt-Anchor" href="#1-新建虚拟机"></a> 1 新建虚拟机</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908142236250.png" alt="image-20230908142236250" /></p><h3 id="2-选择自定义安装"><a class="markdownIt-Anchor" href="#2-选择自定义安装"></a> 2 选择自定义安装</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908142400187.png" alt="image-20230908142400187" /></p><h3 id="3-硬件兼容性选择"><a class="markdownIt-Anchor" href="#3-硬件兼容性选择"></a> 3 硬件兼容性选择</h3><ul><li>选择与<strong>VMware</strong>相匹配的版本，点击下一步</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908142621786.png" alt="image-20230908142621786" /></p><h3 id="4-选择稍后安装操作系统"><a class="markdownIt-Anchor" href="#4-选择稍后安装操作系统"></a> 4 选择稍后安装操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908142816382.png" alt="image-20230908142816382" /></p><h3 id="5-选择要安装的操作系统"><a class="markdownIt-Anchor" href="#5-选择要安装的操作系统"></a> 5 选择要安装的操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143027761.png" alt="image-20230908143027761" /></p><h3 id="6-给虚拟机起名并选择它安装在什么位置"><a class="markdownIt-Anchor" href="#6-给虚拟机起名并选择它安装在什么位置"></a> 6 给虚拟机起名并选择它安装在什么位置</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143346019.png" alt="image-20230908143346019" /></p><h3 id="7-选择处理器配置"><a class="markdownIt-Anchor" href="#7-选择处理器配置"></a> 7 选择处理器配置</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143509051.png" alt="image-20230908143509051" /></p><h3 id="8-设置内存大小"><a class="markdownIt-Anchor" href="#8-设置内存大小"></a> 8 设置内存大小</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143642480.png" alt="image-20230908143642480" /></p><h3 id="9-网络类型选择nat"><a class="markdownIt-Anchor" href="#9-网络类型选择nat"></a> 9  网络类型选择NAT</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143745954.png" alt="image-20230908143745954" /></p><h3 id="10-io控制器类型默认即可"><a class="markdownIt-Anchor" href="#10-io控制器类型默认即可"></a> 10 I/O控制器类型，默认即可</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143828126.png" alt="image-20230908143828126" /></p><h3 id="11-磁盘类型默认即可"><a class="markdownIt-Anchor" href="#11-磁盘类型默认即可"></a> 11 磁盘类型，默认即可</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143902825.png" alt="image-20230908143902825" /></p><h3 id="12-创建磁盘"><a class="markdownIt-Anchor" href="#12-创建磁盘"></a> 12 创建磁盘</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908143937104.png" alt="image-20230908143937104" /></p><h3 id="13-磁盘分配"><a class="markdownIt-Anchor" href="#13-磁盘分配"></a> 13 磁盘分配</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908144028674.png" alt="image-20230908144028674" /></p><h3 id="14-指定磁盘文件默认即可"><a class="markdownIt-Anchor" href="#14-指定磁盘文件默认即可"></a> 14 指定磁盘文件，默认即可</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908144110656.png" alt="image-20230908144110656" /></p><h3 id="15-新建虚拟机完成"><a class="markdownIt-Anchor" href="#15-新建虚拟机完成"></a> 15 新建虚拟机完成</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908144157428.png" alt="image-20230908144157428" /></p><h3 id="16-安装centos镜像"><a class="markdownIt-Anchor" href="#16-安装centos镜像"></a> 16 安装CentOS镜像</h3><ul><li>点击编辑虚拟机配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908145309603.png" alt="image-20230908145309603" /></p><ul><li>选择<code>CD/DVD</code> 找到下载好的<code>iso</code>镜像路径放进去，点击确定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908150005089.png" alt="image-20230908150005089" /></p><ul><li>开启虚拟机<ul><li>上下箭头可选择 <code>↑</code> 选中 <code>Install CentOS7</code>，回车</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/25517196-04af085f7eebd103.webp" alt="25517196-04af085f7eebd103" /></p><ul><li>选择语言，点击继续</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908150311393.png" alt="image-20230908150311393" /></p><ul><li>软件安装选择最小化安装</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908150818220.png" alt="image-20230908150818220" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908150924342.png" alt="image-20230908150924342" /></p><ul><li><p>创建分区</p><ul><li>点击安装位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908151004104.png" alt="image-20230908151004104" /></p><ul><li>选择我要配置分区，然后点击完成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908151145430.png" alt="image-20230908151145430" /></p><ul><li>选择标准分区，然后点击 <code>+</code> 添加分区</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908151507360.png" alt="image-20230908151507360" /></p><ul><li><code>/boot</code>分区就是操作系统的内核及在引导过程中使用的文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908151957680.png" alt="image-20230908151957680" /></p><ul><li><code>Swap</code>分区在系统的物理内存不够用的时候，把硬盘内存中的一部分空间释放出来，以供当前运行的程序使用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908152029333.png" alt="image-20230908152029333" /></p><ul><li>剩下的空间全部给根分区<code>/</code>，然后点击完成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908152219217.png" alt="image-20230908152219217" /></p><ul><li>点击接受更改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908152300028.png" alt="image-20230908152300028" /></p></li><li><p>下面进行网络配置</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908152422052.png" alt="image-20230908152422052" /></p><ul><li>点击配置，按如下更改，然后点击保存，并设置主机名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908152612519.png" alt="image-20230908152612519" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908152926994.png" alt="image-20230908152926994" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908153001212.png" alt="image-20230908153001212" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908153240349.png" alt="image-20230908153240349" /></p></li><li><p>点击开始安装，安装过程中可以设置<code>root</code>的密码</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908153341136.png" alt="image-20230908153341136" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908153417882.png" alt="image-20230908153417882" /></p><ul><li><p>安装完成后，设置网卡，让虚拟机可以上网</p><ul><li>点击编辑 → 虚拟网络编辑器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/25517196-489dac124b1be481.webp" alt="25517196-489dac124b1be481" /></p><ul><li>点击更改设置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908154539205.png" alt="image-20230908154539205" /></p><ul><li>根据下图进行配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908154748383.png" alt="image-20230908154748383" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908154821137.png" alt="image-20230908154821137" /></p><ul><li>应用，然后点击确定，现在就可以正常使用了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908160139747.png" alt="image-20230908160139747" /></p></li></ul><h3 id="17-配置静态ip"><a class="markdownIt-Anchor" href="#17-配置静态ip"></a> 17 配置静态IP</h3><ul><li>打开命令行，输入<ul><li>网卡默认名称不一定为<code>ens33</code>，需要自行查看</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><ul><li>修改配置文件内容</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230908173017415.png" alt="image-20230908173017415" /></p><ul><li>重启网络服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Grass</title>
      <link href="/posts/4e1214ce/"/>
      <url>/posts/4e1214ce/</url>
      
        <content type="html"><![CDATA[<h2 id="1-方案一通过-epel-源安装centos-8"><a class="markdownIt-Anchor" href="#1-方案一通过-epel-源安装centos-8"></a> 1 方案一：通过 EPEL 源安装（Centos 8）</h2><h3 id="11-安装-epel8-源"><a class="markdownIt-Anchor" href="#11-安装-epel8-源"></a> 1.1 安装 EPEL8 源</h3><p>链接：<a href="https://grass.osgeo.org/download/linux/#GRASS-GIS-current">https://grass.osgeo.org/download/linux/#GRASS-GIS-current</a></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230507202148758.png" alt="image-20230507202148758" /></p><p><em>安装 EPEL8 源步骤：参考链接：<a href="https://blog.csdn.net/Lcongming/article/details/115983236">https://blog.csdn.net/Lcongming/article/details/115983236</a></em></p><ul><li>首先切换到yum仓库源的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><ul><li>创建文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> epel8.repo</span><br><span class="line"><span class="comment"># 文件内容如下：</span></span><br><span class="line">[EPEL]</span><br><span class="line">name=EPEL</span><br><span class="line">baseurl=https://mirrors.cloud.tencent.com/epel/8/Everything/x86_64/ </span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="comment"># 需要确保这个链接能打开</span></span><br><span class="line"><span class="comment"># epel7用这个：https://mirrors.cloud.tencent.com/epel/7/x86_64/</span></span><br></pre></td></tr></table></figure><ul><li>执行 yum repolist 读取查看结果，已经都可以读取了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230507202627273.png" alt="image-20230507202627273" /></p><h3 id="12-查看软件库中是否包含-grass"><a class="markdownIt-Anchor" href="#12-查看软件库中是否包含-grass"></a> 1.2 查看软件库中是否包含 GRASS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search grass</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230507202759087.png" alt="image-20230507202759087" /></p><h3 id="13-安装-grass"><a class="markdownIt-Anchor" href="#13-安装-grass"></a> 1.3 安装 GRASS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install grass</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">Error: Package: wxBase3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.21)(64bit)</span><br><span class="line">Error: Package: xerces-c-3.2.3-5.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: hdf-4.2.14-5.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libtirpc.so.3(TIRPC_0.3.0)(64bit)</span><br><span class="line">Error: Package: wxGTK3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: grass-libs-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16(PNG16_0)(64bit)</span><br><span class="line">Error: Package: wxBase3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: PDAL-libs-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.21)(64bit)</span><br><span class="line">Error: Package: wxBase3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libc.so.6(GLIBC_2.28)(64bit)</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libm.so.6(GLIBC_2.27)(64bit)</span><br><span class="line">Error: Package: wxGTK3-gl-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libreadline.so.7()(64bit)</span><br><span class="line">Error: Package: PDAL-libs-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: python3-wxpython4-4.0.7-13.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: python3-wx-siplib-api(12)(x86-64) &gt;= 12.7</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.21)(64bit)</span><br><span class="line">Error: Package: python3-wxpython4-4.0.7-13.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.21)(64bit)</span><br><span class="line">Error: Package: grass-libs-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16()(64bit)</span><br><span class="line">Error: Package: PDAL-libs-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libc.so.6(GLIBC_2.27)(64bit)</span><br><span class="line">Error: Package: proj-6.3.2-4.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: PDAL-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: libbsd-0.11.7-2.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libc.so.6(GLIBC_2.25)(64bit)</span><br><span class="line">Error: Package: python3-wxpython4-4.0.7-13.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libm.so.6(GLIBC_2.27)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libjson-c.so.4(JSONC_0.14)(64bit)</span><br><span class="line">Error: Package: xerces-c-3.2.3-5.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: hdf5-1.10.5-4.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libm.so.6(GLIBC_2.27)(64bit)</span><br><span class="line">Error: Package: wxGTK3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16(PNG16_0)(64bit)</span><br><span class="line">Error: Package: hdf5-1.10.5-4.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: PDAL-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.21)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: grass-libs-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libm.so.6(GLIBC_2.23)(64bit)</span><br><span class="line">Error: Package: ogdi-4.1.0-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libtirpc.so.3()(64bit)</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16(PNG16_0)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libjson-c.so.4()(64bit)</span><br><span class="line">Error: Package: wxGTK3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: PDAL-libs-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.22)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpoppler.so.104()(64bit)</span><br><span class="line">Error: Package: xerces-c-3.2.3-5.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libm.so.6(GLIBC_2.27)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: python3-wxpython4-4.0.7-13.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: wxGTK3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: python3-dateutil</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libcfitsio.so.7()(64bit)</span><br><span class="line">           Available: cfitsio-3.47-1.el8.x86_64 (EPEL)</span><br><span class="line">               libcfitsio.so.7()(64bit)</span><br><span class="line">           Installed: cfitsio-3.370-10.el7.x86_64 (@epel)</span><br><span class="line">              ~libcfitsio.so.2()(64bit)</span><br><span class="line">Error: Package: hdf-4.2.14-5.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libtirpc.so.3()(64bit)</span><br><span class="line">Error: Package: proj-6.3.2-4.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: netcdf-4.7.0-2.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libtirpc.so.3()(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libdap.so.25()(64bit)</span><br><span class="line">Error: Package: ogdi-4.1.0-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libtirpc.so.3(TIRPC_0.3.0)(64bit)</span><br><span class="line">Error: Package: PDAL-libs-2.1.0-8.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: python3-wxpython4-4.0.7-13.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.20)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.8)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16(PNG16_0)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libgif.so.7()(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libjasper.so.4()(64bit)</span><br><span class="line">Error: Package: proj-epsg-4.8.0-4.el7.x86_64 (@epel)</span><br><span class="line">           Requires: proj = 4.8.0-4.el7</span><br><span class="line">           Removing: proj-4.8.0-4.el7.x86_64 (@epel)</span><br><span class="line">               proj = 4.8.0-4.el7</span><br><span class="line">           Updated By: proj-6.3.2-4.el8.x86_64 (EPEL)</span><br><span class="line">               proj = 6.3.2-4.el8</span><br><span class="line">Error: Package: proj-nad-4.8.0-4.el7.x86_64 (@epel)</span><br><span class="line">           Requires: proj = 4.8.0-4.el7</span><br><span class="line">           Removing: proj-4.8.0-4.el7.x86_64 (@epel)</span><br><span class="line">               proj = 4.8.0-4.el7</span><br><span class="line">           Updated By: proj-6.3.2-4.el8.x86_64 (EPEL)</span><br><span class="line">               proj = 6.3.2-4.el8</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libhistory.so.7()(64bit)</span><br><span class="line">Error: Package: wxBase3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: gdal-libs-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16()(64bit)</span><br><span class="line">Error: Package: arpack-3.7.0-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libm.so.6(GLIBC_2.27)(64bit)</span><br><span class="line">Error: Package: proj-6.3.2-4.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(CXXABI_1.3.9)(64bit)</span><br><span class="line">Error: Package: proj-6.3.2-4.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.21)(64bit)</span><br><span class="line">Error: Package: grass-7.8.7-1.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16()(64bit)</span><br><span class="line">Error: Package: wxGTK3-3.0.4-11.el8.x86_64 (EPEL)</span><br><span class="line">           Requires: libpng16.so.16()(64bit)</span><br></pre></td></tr></table></figure><p>直接 yum 安装 grass 会存在依赖错误的问题，先看报错缺的是什么包，然后通过rpm的方式先把缺的包装好，所有缺的包安装完毕后，就可以通过yum install grass完成grass的安装，缺的包可以在这个网站上找：<a href="https://pkgs.org/">https://pkgs.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230507203155606.png" alt="image-20230507203155606" /></p><ul><li><p>假设缺的包是下面这个：</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230507203400626.png" alt="image-20230507203400626" /></p></li><li><p>点进去，查看这个包的下载地址：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230507203411137.png" alt="image-20230507203411137" /></p><ul><li>然后通过rpm命令安装这个包：rpm -Uvh 包的URL</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -Uvh 包的URL</span></span><br><span class="line">rpm -Uvh https://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/glibc-2.28-164.el8.x86_64.rpm</span><br><span class="line"><span class="comment"># 强制安装，忽略依赖错误</span></span><br><span class="line"><span class="comment"># rpm -Uvh https://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/glibc-2.28-164.el8.x86_64.rpm --force --nodeps</span></span><br></pre></td></tr></table></figure><ul><li>参考资料：<a href="https://blog.csdn.net/fancy_xunbei/article/details/6268441">https://blog.csdn.net/fancy_xunbei/article/details/6268441</a></li></ul><h2 id="2-方案二源码编译安装"><a class="markdownIt-Anchor" href="#2-方案二源码编译安装"></a> 2 方案二：源码编译安装</h2><p>参考链接：<a href="https://www.zhihu.com/zvideo/1496911384683773952">https://www.zhihu.com/zvideo/1496911384683773952</a></p><ul><li>下载安装包</li><li>解压并进入</li><li>开始编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/home/oge/oge-grass</span><br></pre></td></tr></table></figure><p>疑难杂症</p><ul><li>GRASS需要针对 zstd 进行编译和链接。查看您尝试的命令(<code>yum install zstd-devel</code>)，我假设您使用的是RHEL/CentOS7。在CentOS存储库中没有zstd的包-您需要从<a href="https://fedoraproject.org/wiki/EPEL">EPEL</a>安装它。它应该看起来像这样</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508084941624.png" alt="image-20230508084941624" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libzstd-devel</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508084900049.png" alt="image-20230508084900049" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis gdal-config</span><br><span class="line"><span class="comment"># 然后再在编译时指定依赖的位置</span></span><br><span class="line">./configure --with-gdal=/usr/local/bin/gdal-config --prefix=/home/oge/oge-grass</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508090349691.png" alt="image-20230508090349691" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install PNG-devel</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508090437991.png" alt="image-20230508090437991" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install fftw-devel</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508090610207.png" alt="image-20230508090610207" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cairo-devel</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508091746038.png" alt="image-20230508091746038" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install freetype-devel</span><br></pre></td></tr></table></figure><ul><li>…</li></ul><h2 id="3-方案三-docker镜像方式安装-推荐"><a class="markdownIt-Anchor" href="#3-方案三-docker镜像方式安装-推荐"></a> 3 方案三： Docker镜像方式安装 (推荐)</h2><ul><li>grass docker 镜像：<a href="https://grass.osgeo.org/download/docker/">https://grass.osgeo.org/download/docker/</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230508194802552.png" alt="image-20230508194802552" /></p><ul><li>创建容器</li></ul>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遥感 </tag>
            
            <tag> GIS </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Clash – 代理 – VPN</title>
      <link href="/posts/438a2103/"/>
      <url>/posts/438a2103/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是clash"><a class="markdownIt-Anchor" href="#1-什么是clash"></a> 1 什么是Clash?</h3><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/78805a221a988e7-44.png" alt="78805a221a988e7-44" /></p><p>Clash 是一个跨平台的基于规则的代理实用程序，运行在网络和应用层，支持开箱即用的各种代理和反审查协议。</p><p>Clash 的使用对普通用户来说可能具有挑战性。那些可能想考虑改用 GUI 客户端，我们确实有一些建议：</p><ul><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Windows 版 Clash</a>（Windows 和 macOS）</li><li><a href="https://github.com/Kr328/ClashForAndroid">安卓版 Clash</a></li><li><a href="https://github.com/yichengchen/clashX">ClashX</a> 或者 <a href="https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public">ClashX Pro</a> (macOS)</li></ul><h3 id="2-安装linux-clash"><a class="markdownIt-Anchor" href="#2-安装linux-clash"></a> 2 安装Linux Clash</h3><h4 id="21-下载clash"><a class="markdownIt-Anchor" href="#21-下载clash"></a> 2.1 下载Clash</h4><ul><li>下载链接：<a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230906191333077.png" alt="image-20230906191333077" /></p><h4 id="22-上传至linux服务器"><a class="markdownIt-Anchor" href="#22-上传至linux服务器"></a> 2.2 上传至Linux服务器</h4><ul><li>创建文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/clash &amp;&amp; <span class="built_in">cd</span> /opt/clash</span><br></pre></td></tr></table></figure><ul><li>上传或移动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> clash-linux-386-v1.16.0 /opt/clash/clash</span><br></pre></td></tr></table></figure><h4 id="23-解压clash"><a class="markdownIt-Anchor" href="#23-解压clash"></a> 2.3 解压Clash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip clash-linux-386-v1.16.0.gz</span><br></pre></td></tr></table></figure><h4 id="24-文件夹授权"><a class="markdownIt-Anchor" href="#24-文件夹授权"></a> 2.4 文件夹授权</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x clash</span><br></pre></td></tr></table></figure><h3 id="3-设置clash的配置"><a class="markdownIt-Anchor" href="#3-设置clash的配置"></a> 3 设置Clash的配置</h3><p>注：clash默认读取的配置文件位置在：<code>~/.config/clash/</code></p><h4 id="31-设置配置文件"><a class="markdownIt-Anchor" href="#31-设置配置文件"></a> 3.1 设置配置文件</h4><ul><li>创建一个文件夹：放置我们的Clash配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.config/clash/ &amp;&amp; <span class="built_in">cd</span> ~/.config/clash/ </span><br></pre></td></tr></table></figure><ul><li>获取配置文件</li></ul><p>如果没法直接下载，从PC电脑获取到Windows本地Clash的<code>yaml</code>、<code>mmdb</code>文件放到服务器的<code>./config/clash/</code>下面亦可，<code>yaml</code>文件命名为<code>config.yaml</code>、<code>mmdb</code>文件命名为：<code>Country.mmdb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O config.yaml <span class="string">&quot;yaml下载链接&quot;</span></span><br><span class="line">sudo wget -O XXX.mmdb <span class="string">&quot;mmdb下载链接&quot;</span></span><br></pre></td></tr></table></figure><p><code>yaml </code>文件大致内容如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">bind-address:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;127.0.0.1:9090&#x27;</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">......</span></span><br></pre></td></tr></table></figure><h3 id="4-启动服务"><a class="markdownIt-Anchor" href="#4-启动服务"></a> 4 启动服务</h3><ul><li>直接启动我们的<code>./clash</code>即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-12-centos clash]<span class="comment"># ./clash </span></span><br><span class="line">INFO[0000] Start initial compatible provider 自动选择       </span><br><span class="line">INFO[0000] Start initial compatible provider FreeGecko  </span><br><span class="line">INFO[0000] Start initial compatible provider 故障转移       </span><br><span class="line">INFO[0000] RESTful API listening at: 127.0.0.1:34567    </span><br><span class="line">INFO[0000] Mixed(http+socks) proxy listening at: [::]:7890</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
            <tag> Linux </tag>
            
            <tag> Clash </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地启动前端打包的项目</title>
      <link href="/posts/16380ff0/"/>
      <url>/posts/16380ff0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-全局安装live-server插件"><a class="markdownIt-Anchor" href="#1-全局安装live-server插件"></a> 1 全局安装<code>live-server</code>插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g live-server </span><br></pre></td></tr></table></figure><h3 id="2-启动服务"><a class="markdownIt-Anchor" href="#2-启动服务"></a> 2 启动服务</h3><ul><li>在<code>dist/build</code>文件夹中终端输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">live-server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S集群环境搭建(Docker作为容器)</title>
      <link href="/posts/d862c611/"/>
      <url>/posts/d862c611/</url>
      
        <content type="html"><![CDATA[<p>本文参考：<a href="https://zhuanlan.zhihu.com/p/558014199?utm_id=0">https://zhuanlan.zhihu.com/p/558014199?utm_id=0</a></p><h2 id="1-安装docker"><a class="markdownIt-Anchor" href="#1-安装docker"></a> 1.  安装Docker</h2><h3 id="11-安装docker-20107"><a class="markdownIt-Anchor" href="#11-安装docker-20107"></a> 1.1  安装docker 20.10.7</h3><p><strong>注意 Docker 版本，要和 Kubernetes 版本 有对应关系</strong></p><ul><li>三台机器上执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装/更新 yum-utils</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 docker 20.10.7 版本</span></span><br><span class="line">yum -y install docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 是否成功, 有 Client 和 Server 即成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h3 id="12-配置加速镜像"><a class="markdownIt-Anchor" href="#12-配置加速镜像"></a> 1.2  配置加速镜像</h3><ul><li>三台机器上执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://82m9ar63.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker的后台线程</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否配置成功</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="2-安装kubernetes"><a class="markdownIt-Anchor" href="#2-安装kubernetes"></a> 2.  安装Kubernetes</h2><ul><li>每台机器2GB或者更多的RAM(如果少于这个数字 将会影响应用的运行内存)</li><li>CPU2核以上</li><li>集群中所有的服务器的网络彼此可以相互连接。</li></ul><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld NetworkManager</span><br><span class="line">systemctl disable firewalld NetworkManager</span><br></pre></td></tr></table></figure><h3 id="21-设置hostname"><a class="markdownIt-Anchor" href="#21-设置hostname"></a> 2.1  设置hostname</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看主机名</span></span><br><span class="line">hostname</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置主机名</span></span><br><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line">hostnamectl set-hostname k8s-node1</span><br><span class="line">hostnamectl set-hostname k8s-node2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新</span></span><br><span class="line">bash</span><br></pre></td></tr></table></figure><h3 id="22-关闭交换区"><a class="markdownIt-Anchor" href="#22-关闭交换区"></a> 2.2  关闭交换区</h3><ul><li>三台机器上执行</li><li>下面是一些安全设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 交换分区</span></span><br><span class="line">free -m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 SELinux 设置为 permissive 模式（相当于将其禁用）  第一行是临时禁用，第二行是永久禁用</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭swap；第一行是临时禁用，第二行是永久禁用</span></span><br><span class="line">swapoff -a  </span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许 iptables 检查桥接流量 （K8s 官方要求）</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让配置生效</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="23-安装k8s三大件"><a class="markdownIt-Anchor" href="#23-安装k8s三大件"></a> 2.3  安装K8S三大件</h3><p>安装 kubelet、kebeadm、kubectl；注意版本 (1.20.9)</p><ul><li>三台机器上执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 k8s 的 yum 源地址</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动kubelet</span></span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 kubelet 状态：一会停止 一会运行。 这个状态是对的，kubelet 等待 kubeadm 发号指令。</span></span><br><span class="line">systemctl status kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="24-使用kubeadm引导集群"><a class="markdownIt-Anchor" href="#24-使用kubeadm引导集群"></a> 2.4   使用kubeadm引导集群</h3><ul><li>下载各个机器需要的镜像,三台机器都要安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置镜像，生成 images.sh</span></span><br><span class="line">sudo tee ./images.sh &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.20.9</span><br><span class="line">kube-proxy:v1.20.9</span><br><span class="line">kube-controller-manager:v1.20.9</span><br><span class="line">kube-scheduler:v1.20.9</span><br><span class="line">coredns:1.7.0</span><br><span class="line">etcd:3.4.13-0</span><br><span class="line">pause:3.2</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/$imageName</span><br><span class="line">done</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">chmod +x ./images.sh &amp;&amp; ./images.sh</span><br></pre></td></tr></table></figure><ul><li>使用<code>docker images</code> 查看</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406144630834.png" alt="image-20230406144630834" /></p><h3 id="25-初始化主节点即把看-k8s-master-变为主节点"><a class="markdownIt-Anchor" href="#25-初始化主节点即把看-k8s-master-变为主节点"></a> 2.5  初始化主节点，即把看 k8s-master 变为主节点</h3><ul><li>三台机器上执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有机器添加 master 域名映射，以下 IP 为 master 的 IP；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 k8s-master 即 访问 192.168.1.135</span></span><br><span class="line">echo &quot;192.168.1.135  k8s-master&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><ul><li>master节点上执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主节点初始化 （只在 master 服务器执行， 其他 node 不用）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--apiserver-advertise-address: master 的 IP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--control-plane-endpoint: master 的域名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--service-cidr 和 --pod-network-cidr 是网络范围，雷神 建议不要改。要改的话 2 个cidr 和 vps（192.168.x.x） 的，3 个网络互相不能重叠；还要修改 calico.yaml的 IP（下图有写）。</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.1.135 \</span><br><span class="line">--control-plane-endpoint=k8s-master \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/16 \</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br></pre></td></tr></table></figure><ul><li>出现这个即成功了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406145652752.png" alt="image-20230406145652752" /></p><h3 id="25-根据提示继续"><a class="markdownIt-Anchor" href="#25-根据提示继续"></a> 2.5  根据提示继续</h3><ul><li>master成功后提示</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and then running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join k8s-master:6443 --token is7ewi.nznlk1wdhsaocmp1 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:b2795fca75bab316c566e98a619a3ce9b18c418e978c7b8fa9c48ff4143fd3c5 \</span><br><span class="line">    --control-plane</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join k8s-master:6443 --token is7ewi.nznlk1wdhsaocmp1 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:b2795fca75bab316c566e98a619a3ce9b18c418e978c7b8fa9c48ff4143fd3c5</span><br></pre></td></tr></table></figure><p>To start using your cluster, you need to run the following as a regular user:</p><p>要开始使用集群，您需要以普通用户身份运行以下命令(<font color='red'>master节点执行</font>）：源自上面的提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h3 id="26-安装网络组件calico"><a class="markdownIt-Anchor" href="#26-安装网络组件calico"></a> 2.6  安装网络组件（calico）</h3><p><font color='red'>注：只在 master 服务执行。其他 node 服务器 不用。</font></p><ul><li>在master上执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 calico.yaml</span></span><br><span class="line">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载配置</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><ul><li>或者（这个更不会出错）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.18/manifests/calico.yaml</span><br></pre></td></tr></table></figure><ul><li>下载完成后生成calico.yaml</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406150214816.png" alt="image-20230406150214816" /></p><ul><li>或者安装flannel</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span><br></pre></td></tr></table></figure><p><font color='red'>注意</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果修改了 初始化主节点中的</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br><span class="line">将 calico.yaml 的配置， # 去掉，IP 写 改的 IP。</span><br></pre></td></tr></table></figure><h3 id="27-worker-加入集群"><a class="markdownIt-Anchor" href="#27-worker-加入集群"></a> 2.7  <strong>Worker 加入集群</strong></h3><ul><li>worker节点加入到集群中（源自提示）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join k8s-master:6443 --token is7ewi.nznlk1wdhsaocmp1 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:b2795fca75bab316c566e98a619a3ce9b18c418e978c7b8fa9c48ff4143fd3c5</span><br></pre></td></tr></table></figure><ul><li>出现这个即成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406153948047.png" alt="image-20230406153948047" /></p><h3 id="28-每次重启需要先启动docker否则k8s无法启动"><a class="markdownIt-Anchor" href="#28-每次重启需要先启动docker否则k8s无法启动"></a> 2.8  每次重启需要先启动docker，否则k8s无法启动</h3><h3 id="29-令牌过期"><a class="markdownIt-Anchor" href="#29-令牌过期"></a> 2.9  令牌过期</h3><ul><li>在master主节点执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新获取令牌</span></span><br><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure><h3 id="210-部署dashboard"><a class="markdownIt-Anchor" href="#210-部署dashboard"></a> 2.10  部署Dashboard</h3><ul><li>参考链接: <a href="http://www.codeforest.cn/article/570">kubernetes(k8s)部署Dashboard - 干货分享 - 代码森林 (codeforest.cn)</a></li></ul><h4 id="2101-运行pod创建资源"><a class="markdownIt-Anchor" href="#2101-运行pod创建资源"></a> 2.10.1  运行pod（创建资源）</h4><p>部署 dashboard（可视化页面）, <a href="https://github.com/kubernetes/dashboard">kubernetes 官方提供的可视化界面</a></p><ul><li>在master上执行，推荐下载到本地导入虚拟机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据 在线配置文件 创建资源</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地配置</span></span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure><h4 id="2102-设置访问端口"><a class="markdownIt-Anchor" href="#2102-设置访问端口"></a> 2.10.2  设置访问端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件 找到 <span class="built_in">type</span>，将 ClusterIP 改成 NodePort</span></span><br><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到端口，在安全组放行</span></span><br><span class="line">kubectl get svc -A |grep kubernetes-dashboard</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406155958282.png" alt="image-20230406155958282" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406161329065.png" alt="image-20230406161329065" /></p><p>32499即为访问端口，以后只需要使用任一节点的ip+32499即可访问</p><p><a href="https://192.168.1.135:32499/">https://192.168.1.135:32499</a> （要注意是 https，port 是映射的端口，在配置文件查看）</p><h2 id="3-疑难杂症"><a class="markdownIt-Anchor" href="#3-疑难杂症"></a> 3 疑难杂症</h2><h3 id="31-删除现有的dashboard服务"><a class="markdownIt-Anchor" href="#31-删除现有的dashboard服务"></a> 3.1 删除现有的dashboard服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service kubernetes-dashboard --namespace=kubernetes-dashboard</span><br></pre></td></tr></table></figure><ul><li>根据yaml来删除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f recommended.yaml </span><br></pre></td></tr></table></figure><ul><li>若资源下载不下来，则直接本地导入recommended.yaml  ，下载地址如下</li></ul><p><a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml">https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</a></p><ul><li>执行:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure><h3 id="32-dashboard启动失败无法访问"><a class="markdownIt-Anchor" href="#32-dashboard启动失败无法访问"></a> 3.2 dashboard启动失败（无法访问）</h3><p>修改了 NodePort 后，Pod kubernetes-dashboard 起不来了。（环境：虚拟机）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">kubectl logs -f -n kubernetes-dashboard kubernetes-dashboard-658485d5c7-f89v7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/1652075593643-5900409d-98b9-48ef-8eb8-b6160feb6b71.png" alt="image.png" /></p><p>解决思路</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、将 dashboard 部署到 master上，因为 master 刚安装了网络组件</span><br><span class="line">2、让 工作节点 也能访问 apiServer</span><br></pre></td></tr></table></figure><p>方案1</p><ul><li>先卸载原来的 dashboard</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无法访问，查看 部署到 哪个 node 上了， 将 dashboard 部署到 master 上</span></span><br><span class="line">kubectl get pods -A -o wide</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230407113313033.png" alt="image-20230407113313033" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 recommended.yaml，添加下面</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/1652078359412-58130528-5fe9-407b-8be2-5b4ddcbad064.png" alt="image.png" /></p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/1652078430899-c1b3f50d-354e-495c-8d02-e5e5e1353d1c.png" alt="image.png" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新安装 dashboard</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件 找到 <span class="built_in">type</span>，将 ClusterIP 改成 NodePort</span></span><br><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到端口，在安全组放行</span></span><br><span class="line">kubectl get svc -A |grep kubernetes-dashboard</span><br></pre></td></tr></table></figure><ul><li>创建访问账号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建访问账号，准备一个yaml文件</span></span><br><span class="line">vim dash-usr.yaml</span><br></pre></td></tr></table></figure><ul><li>文件内容如下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dash-usr.yaml</span><br></pre></td></tr></table></figure><ul><li>令牌访问</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取访问令牌</span></span><br><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=&quot;&#123;.secrets[0].name&#125;&quot;) -o go-template=&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230407135656881.png" alt="image-20230407135656881" /></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IkZkbV91WkVqTnp3clZLd29JS1FYUWxURzZyd0FLcnpVQzBtRlRMTmpya0UifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTVrbGtrIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiNWVhYjQ2MS0xNjE1LTQ5ZTQtYTAzNC0wY2MxYWM1YTI5ODkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.eum4COcUzn6wt<span class="built_in">_</span>vOpCUUEiNENzeGUTC<span class="built_in">_</span>ZlKeB8d0IplFlZWrAav3RbqV5LMDRRIyyZ-7csJb3COhFEiCRtlkc9MM60od4IRMscNxv<span class="built_in">_</span>tm11A32pmGn9eFERyaYjKUFBHZfF34jPcsjYqU50TDn6wykI<span class="built_in">_</span>B6r9ZzvpJemR-wqF2y-GBvmz8q19D9q5zlhaE9gmmvksEx-D0ZyOeZo4tMdbD757OdTjgzlYhmTpfTs-Z8-sdKWnHGFCYbAPzrEgMgChcIjlyDle9-JaE1WCosGCA73xsBzXNnkvYC7YB<span class="built_in">_</span>tagX4BhGDZEu4eyRNbgCAqO6of6QnvDXvlesd59IU-WMVE-7Q</span><br></pre></td></tr></table></figure><ul><li>将令牌复制到token处</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230407140527932.png" alt="image-20230407140527932" /></p><ul><li>登录成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230407140620636.png" alt="image-20230407140620636" /></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker修改容器映射主机端口</title>
      <link href="/posts/9c5d9ac5/"/>
      <url>/posts/9c5d9ac5/</url>
      
        <content type="html"><![CDATA[<h3 id="1-对于已经存在的容器更改端口"><a class="markdownIt-Anchor" href="#1-对于已经存在的容器更改端口"></a> 1 对于已经存在的容器，更改端口</h3><ul><li><p>停止容器</p></li><li><p>将容器打包成镜像</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 4f4561192346 wbw-geoserver:0.1（自定义镜像名:自定版本号）</span><br></pre></td></tr></table></figure><ul><li>通过新镜像开启新容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name wbw-geoserver -p 31520:8080 wbw-geoserver:0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-d  ——&gt;后台启动</span></span><br><span class="line"><span class="comment">#-p  ——&gt;主机端口：容器端口</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装配置</title>
      <link href="/posts/b035bcd6/"/>
      <url>/posts/b035bcd6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装docker-20107"><a class="markdownIt-Anchor" href="#1-安装docker-20107"></a> 1  安装docker 20.10.7</h2><p><strong>注意 Docker 版本，要和 Kubernetes 版本 有对应关系</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装/更新 yum-utils</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 docker 20.10.7 版本</span></span><br><span class="line">yum -y install docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 是否成功, 有 Client 和 Server 即成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="2-配置加速镜像"><a class="markdownIt-Anchor" href="#2-配置加速镜像"></a> 2  配置加速镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://82m9ar63.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否配置成功</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置NFS共享存储服务器</title>
      <link href="/posts/d154fd87/"/>
      <url>/posts/d154fd87/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装-nfs-untils"><a class="markdownIt-Anchor" href="#1-安装-nfs-untils"></a> 1. 安装 nfs-untils</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure><h3 id="2-设置共享目录"><a class="markdownIt-Anchor" href="#2-设置共享目录"></a> 2. 设置共享目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/publicDisk001</span><br><span class="line"># 授权</span><br><span class="line">chmod 777 /data/publicDisk001/</span><br><span class="line"></span><br><span class="line"># 修改文件，让10.0.0.0/24 这个网段的机器都能用</span><br><span class="line">vim /etc/exports</span><br><span class="line"></span><br><span class="line">/data/publicDisk001   10.0.0.0/24(rw,no_root_squash)</span><br></pre></td></tr></table></figure><h3 id="3-启动广播和nfs"><a class="markdownIt-Anchor" href="#3-启动广播和nfs"></a> 3. 启动广播和nfs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nfs</span></span><br><span class="line">systemctl start nfs</span><br><span class="line"><span class="comment"># 若 centerOS8以上，则执行此命令启动 </span></span><br><span class="line">sudo service nfs-server start</span><br></pre></td></tr></table></figure><h3 id="4-在同一网段下另一个主机也安装-nfs-作为客户端"><a class="markdownIt-Anchor" href="#4-在同一网段下另一个主机也安装-nfs-作为客户端"></a> 4. 在同一网段下，另一个主机也安装 nfs 作为客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br><span class="line"><span class="comment"># 启动nfs</span></span><br><span class="line">systemctl start nfs</span><br><span class="line">sudo service nfs-server start</span><br></pre></td></tr></table></figure><h3 id="5-挂载"><a class="markdownIt-Anchor" href="#5-挂载"></a> 5. 挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/disk01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载网盘到此路径</span></span><br><span class="line">mount -t nfs 10.0.0.204:/data/publicDisk001 /data/disk01</span><br></pre></td></tr></table></figure><h3 id="6-查看挂载情况"><a class="markdownIt-Anchor" href="#6-查看挂载情况"></a> 6. 查看挂载情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware虚拟机设置静态IP</title>
      <link href="/posts/f5fad029/"/>
      <url>/posts/f5fad029/</url>
      
        <content type="html"><![CDATA[<h3 id="1-设置虚拟网关"><a class="markdownIt-Anchor" href="#1-设置虚拟网关"></a> 1、设置虚拟网关</h3><p>点击导航栏上面的【编辑】–&gt;【虚拟网络编辑器】，并以【管理员】的身份打开虚拟机。</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/watermark%2Ctype_ZHJvaWRzYW5zZmFsbGJhY2s%2Cshadow_50%2Ctext_Q1NETiBAY2hhb2ZlbmdkZXY%3D%2Csize_20%2Ccolor_FFFFFF%2Ct_70%2Cg_se%2Cx_16.png" alt="img" /></p><p>点击【VMnet8 NAT模式】，取消使用本地使用本地<a href="https://so.csdn.net/so/search?q=dhcp&amp;spm=1001.2101.3001.7020">dhcp</a>服务，配置网络段（子网ip段）为192.168.1.0，点击NAT设置。</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406140828304.png" alt="image-20230406140828304" /></p><p>配置【网关ip】，注意【网关ip】需要在【子网ip】段下，这里设置为192.168.1.2</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406140906021.png" alt="image-20230406140906021" /></p><h3 id="2-配置虚拟机静态ip"><a class="markdownIt-Anchor" href="#2-配置虚拟机静态ip"></a> 2、配置虚拟机静态ip</h3><ul><li>打开命令行，输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><ul><li>修改配置文件内容</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230406141120088.png" alt="image-20230406141120088" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ip</span></span><br><span class="line">IPADDR=192.168.1.136</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gateway</span></span><br><span class="line">GATEWAY=192.168.1.2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DNS</span></span><br><span class="line">DNS1=114.114.114</span><br></pre></td></tr></table></figure><p>注：DNS1是dns服务器，一般设置为114.114.114.114、114.114.115.115和8.8.8.8等(其他的也可以，只不过这几个用的人比较多而已)</p><h3 id="3-检测配置是否成功"><a class="markdownIt-Anchor" href="#3-检测配置是否成功"></a> 3、检测配置是否成功</h3><ul><li>重启网络服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><ul><li>ping一下百度</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 MPI 的埃拉托斯特尼筛法的并行化设计、实现与结果分析</title>
      <link href="/posts/55978286/"/>
      <url>/posts/55978286/</url>
      
        <content type="html"><![CDATA[<h2 id="1-算法介绍"><a class="markdownIt-Anchor" href="#1-算法介绍"></a> 1 算法介绍</h2><p>​埃拉托斯特尼是一位古希腊数学家，他在寻找整数N以内的素数时，采用了一种与众不同的方法：先将2～N的各个数写在纸上：</p><p>​在2的上面画一个圆圈，然后划去2的其他倍数；第一个既未画圈又没有被划去的数是3，将它画圈，再划去3的其他倍数；现在既未画圈又没有被划去的第一个数是5，将它画圈，并划去5的其他倍数……依此类推，一直到所有小于或等于Ｎ的各数都画了圈或划去为止。这时，画了圈的以及未划去的那些数正好就是小于Ｎ的素数。</p><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231025224209018.png" alt="image-20231025224209018" /></p><ul><li>其伪代码如下：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: an integer n &gt; 1</span><br><span class="line"></span><br><span class="line">Let A be an array of Boolean values, indexed by integers 2 to n,</span><br><span class="line">initially all set to true.</span><br><span class="line"></span><br><span class="line"> for i = 2, 3, 4, ..., not exceeding √n:</span><br><span class="line">  if A[i] is true:</span><br><span class="line">    for j = i2, i2+i, i2+2i, i2+3i, ..., not exceeding n :</span><br><span class="line">      A[j] := false</span><br><span class="line"></span><br><span class="line">Output: all i such that A[i] is true.</span><br></pre></td></tr></table></figure><h2 id="2-实验环境"><a class="markdownIt-Anchor" href="#2-实验环境"></a> 2 实验环境</h2><ul><li>硬件环境</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/20231025225837.png" alt="image-20231025224344521" /></p><ul><li>开发环境<ul><li>Visual Studio 2019，MSMPI v10.0</li></ul></li></ul><h2 id="3-mpi环境配置windows"><a class="markdownIt-Anchor" href="#3-mpi环境配置windows"></a> 3 MPI环境配置（Windows）</h2><p>windows 下运行mpi首推微软的msmp，因为比较简单，下载地址为：<a href="https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi%EF%BC%8C">https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi，</a><br />将两个安装包msmpisdk.msi和msmpisetup.exe分别下载然后安装完成后即可，下面是在VS2019中引入MSMPI的步骤：</p><ul><li>在VS中新建C++控制台应用程序，将项目编译改为X64</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231025224621719.png" alt="image-20231025224621719" /></p><ul><li>去安装的SDK目录，找到include与lib文件夹右键项目 – 属性 – vc++ 目录中包含目录添加 include 文件夹路径，库目录中添加 lib 文件夹路径。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231025224632397.png" alt="image-20231025224632397" /></p><ul><li>C/C++ -&gt;预处理器 -&gt; 预处理器定义 -&gt; 添加MPICH_SKIP_MPICXX</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231025224644983.png" alt="image-20231025224644983" /></p><ul><li>C/C++ -&gt; 代码生成  -&gt; 运行库 -&gt;选择：多线程调试(/MTD)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231025224658506.png" alt="image-20231025224658506" /></p><ul><li>属性 – 链接器 – 输入 – 附加依赖项中添加msmpi.lib;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20231025224712946.png" alt="image-20231025224712946" /></p><h2 id="4-linux下配置mpich"><a class="markdownIt-Anchor" href="#4-linux下配置mpich"></a> 4 Linux下配置MPICH</h2><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mpic  </span><br></pre></td></tr></table></figure><ul><li>CmakeLists.txt 下配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.13)    </span><br><span class="line">project(MPI)        </span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD 17)              </span><br><span class="line">find_package(MPI REQUIRED)    </span><br><span class="line">include_directories(<span class="variable">$&#123;MPI_INCLUDE_PATH&#125;</span>)    </span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_COMPILER mpicxx)    </span><br><span class="line"><span class="built_in">set</span>(CMAKE_C_COMPILER mpicc)      </span><br><span class="line">add_executable(MPI main.cpp)</span><br></pre></td></tr></table></figure><h2 id="5-源码及更多分析文档"><a class="markdownIt-Anchor" href="#5-源码及更多分析文档"></a> 5 源码及更多分析文档</h2><div class="tag link"><a class="link-card" title="Github源码" href="https://github.com/binwenwu/Eratosthenes"><div class="left"><img src="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/u%3D1662322932%2C969135674%26fm%3D253%26fmt%3Dauto%26app%3D120%26f%3DJPEG"/></div><div class="right"><p class="text">Github源码</p><p class="url">https://github.com/binwenwu/Eratosthenes</p></div></a></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行计算 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
